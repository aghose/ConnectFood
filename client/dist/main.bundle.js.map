{"version":3,"sources":["C:/Users/User Name/ConnectFood/client lazy","C:/Users/User Name/ConnectFood/client/src/app/app.component.css","C:/Users/User Name/ConnectFood/client/src/app/app.component.html","C:/Users/User Name/ConnectFood/client/src/app/app.component.ts","C:/Users/User Name/ConnectFood/client/src/app/app.module.ts","C:/Users/User Name/ConnectFood/client/src/app/authentication/app-user-info/app-user-info.component.css","C:/Users/User Name/ConnectFood/client/src/app/authentication/app-user-info/app-user-info.component.html","C:/Users/User Name/ConnectFood/client/src/app/authentication/app-user-info/app-user-info.component.ts","C:/Users/User Name/ConnectFood/client/src/app/authentication/app-user-info/app-user-update.service.ts","C:/Users/User Name/ConnectFood/client/src/app/authentication/login/login-model.ts","C:/Users/User Name/ConnectFood/client/src/app/authentication/login/login.component.css","C:/Users/User Name/ConnectFood/client/src/app/authentication/login/login.component.html","C:/Users/User Name/ConnectFood/client/src/app/authentication/login/login.component.ts","C:/Users/User Name/ConnectFood/client/src/app/authentication/login/login.service.ts","C:/Users/User Name/ConnectFood/client/src/app/authentication/misc/logout.service.ts","C:/Users/User Name/ConnectFood/client/src/app/authentication/signup/signup.component.css","C:/Users/User Name/ConnectFood/client/src/app/authentication/signup/signup.component.html","C:/Users/User Name/ConnectFood/client/src/app/authentication/signup/signup.component.ts","C:/Users/User Name/ConnectFood/client/src/app/authentication/signup/signup.service.ts","C:/Users/User Name/ConnectFood/client/src/app/banner/banner.component.css","C:/Users/User Name/ConnectFood/client/src/app/banner/banner.component.html","C:/Users/User Name/ConnectFood/client/src/app/banner/banner.component.ts","C:/Users/User Name/ConnectFood/client/src/app/cart/cart.component.css","C:/Users/User Name/ConnectFood/client/src/app/cart/cart.component.html","C:/Users/User Name/ConnectFood/client/src/app/cart/cart.component.ts","C:/Users/User Name/ConnectFood/client/src/app/common-util/date-formatter.pipe.ts","C:/Users/User Name/ConnectFood/client/src/app/common-util/food-web-busy-config.ts","C:/Users/User Name/ConnectFood/client/src/app/common-util/request.service.ts","C:/Users/User Name/ConnectFood/client/src/app/common-util/route-preprocess.service.ts","C:/Users/User Name/ConnectFood/client/src/app/common-util/session-data.service.ts","C:/Users/User Name/ConnectFood/client/src/app/donate/donate.component.css","C:/Users/User Name/ConnectFood/client/src/app/donate/donate.component.html","C:/Users/User Name/ConnectFood/client/src/app/donate/donate.component.ts","C:/Users/User Name/ConnectFood/client/src/app/food-listings/add-remove-food-listing.service.ts","C:/Users/User Name/ConnectFood/client/src/app/food-listings/claim-unclaim-food-listing.service.ts","C:/Users/User Name/ConnectFood/client/src/app/food-listings/food-listings-filters/food-listings-filters.component.css","C:/Users/User Name/ConnectFood/client/src/app/food-listings/food-listings-filters/food-listings-filters.component.html","C:/Users/User Name/ConnectFood/client/src/app/food-listings/food-listings-filters/food-listings-filters.component.ts","C:/Users/User Name/ConnectFood/client/src/app/food-listings/food-listings.component.css","C:/Users/User Name/ConnectFood/client/src/app/food-listings/food-listings.component.html","C:/Users/User Name/ConnectFood/client/src/app/food-listings/food-listings.component.ts","C:/Users/User Name/ConnectFood/client/src/app/food-listings/food-types/food-types.component.css","C:/Users/User Name/ConnectFood/client/src/app/food-listings/food-types/food-types.component.html","C:/Users/User Name/ConnectFood/client/src/app/food-listings/food-types/food-types.component.ts","C:/Users/User Name/ConnectFood/client/src/app/food-listings/food-types/food-types.service.ts","C:/Users/User Name/ConnectFood/client/src/app/food-listings/get-food-listings.service.ts","C:/Users/User Name/ConnectFood/client/src/app/footer/footer.component.css","C:/Users/User Name/ConnectFood/client/src/app/footer/footer.component.html","C:/Users/User Name/ConnectFood/client/src/app/footer/footer.component.ts","C:/Users/User Name/ConnectFood/client/src/app/header/header.component.css","C:/Users/User Name/ConnectFood/client/src/app/header/header.component.html","C:/Users/User Name/ConnectFood/client/src/app/header/header.component.ts","C:/Users/User Name/ConnectFood/client/src/app/home/home.component.css","C:/Users/User Name/ConnectFood/client/src/app/home/home.component.html","C:/Users/User Name/ConnectFood/client/src/app/home/home.component.ts","C:/Users/User Name/ConnectFood/client/src/app/receive/receive.component.css","C:/Users/User Name/ConnectFood/client/src/app/receive/receive.component.html","C:/Users/User Name/ConnectFood/client/src/app/receive/receive.component.ts","C:/Users/User Name/ConnectFood/client/src/app/slick-left-panel/slick-left-panel.component.css","C:/Users/User Name/ConnectFood/client/src/app/slick-left-panel/slick-left-panel.component.html","C:/Users/User Name/ConnectFood/client/src/app/slick-left-panel/slick-left-panel.component.ts","C:/Users/User Name/ConnectFood/client/src/environments/environment.ts","C:/Users/User Name/ConnectFood/client/src/main.ts","C:/Users/User Name/ConnectFood/shared/authentication/app-user-info.ts","C:/Users/User Name/ConnectFood/shared/authentication/login-message.ts","C:/Users/User Name/ConnectFood/shared/authentication/signup-message.ts","C:/Users/User Name/ConnectFood/shared/authentication/update-app-user-message.ts","C:/Users/User Name/ConnectFood/shared/common-util/date-formatter.ts","C:/Users/User Name/ConnectFood/shared/common-util/validation.ts","C:/Users/User Name/ConnectFood/shared/food-listings/add-food-listing-message.ts","C:/Users/User Name/ConnectFood/shared/food-listings/claim-food-listing-message.ts","C:/Users/User Name/ConnectFood/shared/food-listings/food-listing-upload.ts","C:/Users/User Name/ConnectFood/shared/food-listings/food-listing.ts","C:/Users/User Name/ConnectFood/shared/food-listings/food-listings-filters.ts","C:/Users/User Name/ConnectFood/shared/food-listings/get-food-listings-message.ts","C:/Users/User Name/ConnectFood/shared/message-protocol/food-web-response.ts"],"names":[],"mappings":"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","file":"main.bundle.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\treturn new Promise(function(resolve, reject) { reject(new Error(\"Cannot find module '\" + req + \"'.\")); });\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"../../../../../client lazy recursive\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/User Name/ConnectFood/client lazy\n// module id = ../../../../../client lazy recursive\n// module chunks = main","exports = module.exports = require(\"../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \"\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/User Name/ConnectFood/client/src/app/app.component.css\n// module id = ../../../../../client/src/app/app.component.css\n// module chunks = main","module.exports = \"<div style=\\\"min-height:100%; margin-bottom: 0px; padding-bottom: 0px;\\\">\\r\\n    <app-header></app-header>\\r\\n\\r\\n    <!-- This is replaced with each component we route to -->\\r\\n    <router-outlet></router-outlet>\\r\\n</div>\\r\\n\\r\\n<app-footer></app-footer>\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/User Name/ConnectFood/client/src/app/app.component.html\n// module id = ../../../../../client/src/app/app.component.html\n// module chunks = main","import { Component } from '@angular/core';\n\n@Component({\n    selector: 'body',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.css']\n})\nexport class AppComponent { }\n\n\n\n// WEBPACK FOOTER //\n// C:/Users/User Name/ConnectFood/client/src/app/app.component.ts","import { BrowserModule } from '@angular/platform-browser';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { NgModule, Injectable } from '@angular/core';\r\nimport { DatePipe } from '@angular/common';\r\nimport { HttpModule } from '@angular/http'\r\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\r\nimport { BootstrapModalModule } from 'ng2-bootstrap-modal';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { AgmCoreModule } from '@agm/core';\r\nimport { ImageCropperComponent } from 'ng2-img-cropper';\r\nimport { BusyModule } from 'angular2-busy';\r\n\r\nimport { MdListModule,\r\n         MdCheckboxModule,\r\n         MdRadioModule,\r\n         MdButtonModule,\r\n         MdInputModule,\r\n         MdSelectModule,\r\n         MdDatepickerModule,\r\n         MdNativeDateModule,\r\n         DateAdapter,\r\n         NativeDateAdapter,\r\n         MD_DATE_FORMATS,\r\n         MD_NATIVE_DATE_FORMATS } from '@angular/material';\r\n\r\nimport { AppComponent } from './app.component';\r\nimport { HomeComponent } from './home/home.component';\r\nimport { HeaderComponent } from './header/header.component';\r\nimport { FooterComponent } from './footer/footer.component';\r\nimport { LoginComponent } from './authentication/login/login.component';\r\nimport { DonateComponent } from './donate/donate.component';\r\nimport { ReceiveComponent } from './receive/receive.component';\r\nimport { CartComponent } from './cart/cart.component';\r\nimport { SignupComponent } from './authentication/signup/signup.component';\r\nimport { BannerComponent } from './banner/banner.component';\r\nimport { SlickLeftPanelComponent } from './slick-left-panel/slick-left-panel.component';\r\nimport { FoodListingsFiltersComponent } from './food-listings/food-listings-filters/food-listings-filters.component';\r\nimport { FoodListingsComponent } from './food-listings/food-listings.component';\r\nimport { FoodTypesComponent } from './food-listings/food-types/food-types.component';\r\nimport { AppUserInfoComponent } from './authentication/app-user-info/app-user-info.component';\r\n\r\nimport { RequestService } from './common-util/request.service';\r\nimport { RoutePreprocessService } from './common-util/route-preprocess.service';\r\nimport { SessionDataService } from \"./common-util/session-data.service\";\r\nimport { FoodTypesService } from './food-listings/food-types/food-types.service';\r\nimport { DateFormatterPipe } from \"./common-util/date-formatter.pipe\"\r\n\r\n\r\nconst appRoutes: Routes = [\r\n    /*{\r\n        path: 'login', // This can be both modal popup and its own page!\r\n        component: LoginComponent\r\n    },*/\r\n    {\r\n        path: '',\r\n        pathMatch: 'full',\r\n        redirectTo: '/home'\r\n    },\r\n    {\r\n        path: 'home',\r\n        component: HomeComponent,\r\n        canActivate: [RoutePreprocessService],\r\n    },\r\n    {\r\n        path: 'donate',\r\n        component: DonateComponent,\r\n        canActivate: [RoutePreprocessService]\r\n    },\r\n    {\r\n        path: 'receive',\r\n        component: ReceiveComponent,\r\n        canActivate: [RoutePreprocessService],\r\n        // Make sure that we get the FoodTypes from the back end before routing to the receiver interface!\r\n        resolve: {\r\n            foodTypes: FoodTypesService\r\n        }\r\n    },\r\n    {\r\n        path: 'cart',\r\n        component: CartComponent,\r\n        canActivate: [RoutePreprocessService],\r\n        // Make sure that we get the FoodTypes from the back end before routing to the cart interface!\r\n        resolve: {\r\n            foodTypes: FoodTypesService\r\n        }\r\n    },\r\n    {\r\n        path: 'signup',\r\n        component: SignupComponent,\r\n        canActivate: [RoutePreprocessService]\r\n    },\r\n    {\r\n        path: 'appUserInfo',\r\n        component: AppUserInfoComponent,\r\n        canActivate: [RoutePreprocessService]\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    declarations: [\r\n        AppComponent,\r\n        HomeComponent,\r\n        HeaderComponent,\r\n        FooterComponent,\r\n        LoginComponent,\r\n        DonateComponent,\r\n        ReceiveComponent,\r\n        SignupComponent,\r\n        ImageCropperComponent,\r\n        DateFormatterPipe,\r\n        BannerComponent,\r\n        SlickLeftPanelComponent,\r\n        FoodListingsFiltersComponent,\r\n        FoodListingsComponent,\r\n        FoodTypesComponent,\r\n        CartComponent,\r\n        AppUserInfoComponent\r\n    ],\r\n    imports: [\r\n        NgbModule.forRoot(),\r\n        RouterModule.forRoot(appRoutes),\r\n        BrowserModule,\r\n        BrowserAnimationsModule,\r\n        BootstrapModalModule,\r\n        HttpModule,\r\n        FormsModule,\r\n        ReactiveFormsModule,\r\n        BusyModule,\r\n        MdListModule,\r\n        MdCheckboxModule,\r\n        MdRadioModule,\r\n        MdInputModule,\r\n        MdSelectModule,\r\n        MdButtonModule,\r\n        MdDatepickerModule,\r\n        MdNativeDateModule\r\n    ],\r\n    entryComponents: [\r\n        LoginComponent\r\n    ],\r\n    bootstrap: [\r\n        AppComponent\r\n    ],\r\n    providers: [\r\n        DateFormatterPipe,\r\n        RequestService,\r\n        SessionDataService,\r\n        RoutePreprocessService,\r\n        FoodTypesService,\r\n        { provide: DateAdapter, useClass: NativeDateAdapter },\r\n        { provide: MD_DATE_FORMATS, useValue: MD_NATIVE_DATE_FORMATS }\r\n    ]\r\n})\r\nexport class AppModule { }\r\n\n\n\n// WEBPACK FOOTER //\n// C:/Users/User Name/ConnectFood/client/src/app/app.module.ts","exports = module.exports = require(\"../../../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \"label {\\r\\n    font-weight: bold;\\r\\n    font-size: 22px;\\r\\n    padding-bottom: 0px;\\r\\n    margin-bottom: 0px;\\r\\n}\\r\\n\\r\\nh2 {\\r\\n    font-weight: bold;\\r\\n}\\r\\n\\r\\n.classic-link {\\r\\n    color: blue;\\r\\n    cursor: pointer;\\r\\n    cursor: hand;\\r\\n    display: inline-block;\\r\\n    padding-right: 40px;\\r\\n}\\r\\n\\r\\n.classic-link:hover {\\r\\n    text-decoration: underline;\\r\\n}\\r\\n\\r\\nspan {\\r\\n    font-size: 20px;\\r\\n    display: block;\\r\\n    min-height: 50px;\\r\\n}\\r\\n\\r\\nspan > i {\\r\\n    display: none;\\r\\n    position: absolute;\\r\\n    margin-left: 3px;\\r\\n    margin-top: 5px;\\r\\n}\\r\\n\\r\\nspan:hover > i {\\r\\n    display: inline-block;\\r\\n}\\r\\n\\r\\ninput:not(.form-control) {\\r\\n    width: 100%;\\r\\n}\\r\\n\\r\\n.full-width {\\r\\n    width: 100%;\\r\\n}\\r\\n\\r\\n.input-infix {\\r\\n    width: 100%;\\r\\n    padding-right: 30px;\\r\\n    position: absolute;\\r\\n    -webkit-transform: translateY(-20px);\\r\\n            transform: translateY(-20px);\\r\\n}\\r\\n\\r\\n.select-infix {\\r\\n    position: absolute;\\r\\n}\\r\\n\\r\\n.select-infix md-select {\\r\\n    -webkit-transform: translateY(-20px);\\r\\n            transform: translateY(-20px);\\r\\n}\\r\\n\\r\\n.select-infix i {\\r\\n    -webkit-transform: translateY(-3px);\\r\\n            transform: translateY(-3px);\\r\\n}\\r\\n\\r\\ninput:not(.form-control), md-select {\\r\\n    margin-top: 0px;\\r\\n    font-size: 20px;\\r\\n}\\r\\n\\r\\nmd-icon {\\r\\n    cursor: pointer;\\r\\n    cursor: hand;\\r\\n}\\r\\n\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/User Name/ConnectFood/client/src/app/authentication/app-user-info/app-user-info.component.css\n// module id = ../../../../../client/src/app/authentication/app-user-info/app-user-info.component.css\n// module chunks = main","module.exports = \"<div [formGroup]=\\\"appUserInfoForm\\\" class=\\\"container\\\" [ngBusy]=\\\"busySaveConfig\\\" spellcheck=\\\"false\\\">\\n\\n    <h2 class>Identification</h2>\\n    <hr>\\n    <div class=\\\"row\\\">\\n\\n        <div class=\\\"col-md-6\\\">\\n            <div class=\\\"form-group\\\">\\n                <label for=\\\"firstName\\\">{{firstNameLabel}}:</label><br>\\n                <span *ngIf=\\\"!editFlags.get('firstName')\\\" class=\\\"classic-link\\\" (click)=\\\"setEditable('firstName')\\\" title=\\\"edit\\\">\\n                    {{controls.firstName.value}}<i class=\\\"material-icons\\\">&#xe254;</i>\\n                </span>\\n                <span *ngIf=\\\"editFlags.get('firstName')\\\">\\n                    <md-input-container class=\\\"input-infix\\\">\\n                        <input mdInput id=\\\"firstName\\\" formControlName=\\\"firstName\\\" (keyup.enter)=\\\"saveFirstName.click()\\\" autocomplete=\\\"on\\\">\\n                        <md-icon #saveFirstName mdSuffix (click)=\\\"save(controls.firstName, 'firstName')\\\">\\n                            <i class=\\\"material-icons\\\">save</i>\\n                        </md-icon>\\n                        <md-error>Required</md-error>\\n                    </md-input-container>\\n                </span>\\n            </div>\\n\\n            <div class=\\\"form-group\\\">\\n                <label for=\\\"lastName\\\">{{lastNameLabel}}:</label><br>\\n                <span *ngIf=\\\"!editFlags.get('lastName')\\\" class=\\\"classic-link\\\" (click)=\\\"setEditable('lastName')\\\" title=\\\"edit\\\">\\n                    {{controls.lastName.value}}<i class=\\\"material-icons\\\">&#xe254;</i>\\n                </span>\\n                <span *ngIf=\\\"editFlags.get('lastName')\\\">\\n                    <md-input-container class=\\\"input-infix\\\">\\n                        <input mdInput id=\\\"lastName\\\" formControlName=\\\"lastName\\\" (keyup.enter)=\\\"saveLastName.click()\\\" autocomplete=\\\"on\\\">\\n                        <md-icon #saveLastName mdSuffix (click)=\\\"save(controls.lastName, 'lastName')\\\">\\n                            <i class=\\\"material-icons\\\">save</i>\\n                        </md-icon>\\n                        <md-error>Required</md-error>\\n                    </md-input-container>\\n                </span>\\n            </div>\\n        </div><!-- col 1 -->\\n\\n        <div class=\\\"col-md-6\\\">\\n            <div class=\\\"form-group\\\">\\n                <label for=\\\"email\\\">{{emailLabel}}:</label><br>\\n                <span *ngIf=\\\"!editFlags.get('email')\\\" class=\\\"classic-link\\\" (click)=\\\"setEditable('email')\\\" title=\\\"edit\\\">\\n                    {{controls.email.value}}<i class=\\\"material-icons\\\">&#xe254;</i>\\n                </span>\\n                <span *ngIf=\\\"editFlags.get('email')\\\">\\n                    <md-input-container class=\\\"input-infix\\\">\\n                        <input mdInput type=\\\"email\\\" id=\\\"email\\\" formControlName=\\\"email\\\" (keyup.enter)=\\\"saveEmail.click()\\\" autocomplete=\\\"on\\\">\\n                        <md-icon #saveEmail mdSuffix (click)=\\\"save(controls.email, 'email')\\\">\\n                            <i class=\\\"material-icons\\\">save</i>\\n                        </md-icon>\\n                        <md-error>Required</md-error>\\n                    </md-input-container>\\n                </span>\\n            </div>\\n\\n            <div *ngIf=\\\"isOrganization\\\" class=\\\"form-group\\\">\\n                <label for=\\\"organizationName\\\">Organization Name:</label><br>\\n                <span *ngIf=\\\"!editFlags.get('organizationName')\\\" class=\\\"classic-link\\\" (click)=\\\"setEditable('organizationName')\\\" title=\\\"edit\\\">\\n                    {{controls.organizationName.value}}<i class=\\\"material-icons\\\">&#xe254;</i>\\n                </span>\\n                <span *ngIf=\\\"editFlags.get('organizationName')\\\">\\n                    <md-input-container class=\\\"input-infix\\\">\\n                        <input mdInput id=\\\"organizationName\\\" formControlName=\\\"organizationName\\\" (keyup.enter)=\\\"saveOrganizationName.click()\\\" autocomplete=\\\"on\\\">\\n                        <md-icon #saveOrganizationName mdSuffix (click)=\\\"save(controls.organizationName, 'organizationName')\\\">\\n                            <i class=\\\"material-icons\\\">save</i>\\n                        </md-icon>\\n                        <md-error>Required</md-error>\\n                    </md-input-container>\\n                </span>\\n            </div>\\n        </div><!-- col 2 -->\\n\\n    </div><br><br><!-- row -->\\n\\n    <h2 class>Contact Info</h2>\\n    <hr>\\n    <div class=\\\"row\\\">\\n\\n        <div class=\\\"col-md-6\\\">\\n            <div class=\\\"form-group\\\">\\n                <label for=\\\"address\\\">Street Address:</label><br>\\n                <span *ngIf=\\\"!editFlags.get('address')\\\" class=\\\"classic-link\\\" (click)=\\\"setEditable('address')\\\" title=\\\"edit\\\">\\n                    {{controls.address.value}}<i class=\\\"material-icons\\\">&#xe254;</i>\\n                </span>\\n                <span *ngIf=\\\"editFlags.get('address')\\\">\\n                    <md-input-container class=\\\"input-infix\\\">\\n                        <input mdInput id=\\\"address\\\" formControlName=\\\"address\\\" (keyup.enter)=\\\"saveAddress.click()\\\" autocomplete=\\\"on\\\">\\n                        <md-icon #saveAddress mdSuffix (click)=\\\"save(controls.address, 'address')\\\">\\n                            <i class=\\\"material-icons\\\">save</i>\\n                        </md-icon>\\n                        <md-error>Required</md-error>\\n                    </md-input-container>\\n                </span>\\n            </div>\\n\\n            <div class=\\\"form-group\\\">\\n                <label for=\\\"city\\\">City:</label><br>\\n                <span *ngIf=\\\"!editFlags.get('city')\\\" class=\\\"classic-link\\\" (click)=\\\"setEditable('city')\\\" title=\\\"edit\\\">\\n                    {{controls.city.value}}<i class=\\\"material-icons\\\">&#xe254;</i>\\n                </span>\\n                <span *ngIf=\\\"editFlags.get('city')\\\">\\n                    <md-input-container class=\\\"input-infix\\\">\\n                        <input mdInput id=\\\"city\\\" formControlName=\\\"city\\\" (keyup.enter)=\\\"saveCity.click()\\\" autocomplete=\\\"on\\\">\\n                        <md-icon #saveCity mdSuffix (click)=\\\"save(controls.city, 'city')\\\">\\n                            <i class=\\\"material-icons\\\">save</i>\\n                        </md-icon>\\n                        <md-error>Required</md-error>\\n                    </md-input-container>\\n                </span>\\n            </div>\\n\\n            <div class=\\\"form-group\\\">\\n                <label for=\\\"state\\\">State:</label><br>\\n                <span *ngIf=\\\"!editFlags.get('state')\\\" class=\\\"classic-link\\\" (click)=\\\"setEditable('state')\\\" title=\\\"edit\\\">\\n                    {{controls.state.value}}<i class=\\\"material-icons\\\">&#xe254;</i>\\n                </span>\\n                <span *ngIf=\\\"editFlags.get('state')\\\" class=\\\"select-infix\\\">\\n                    <md-select id=\\\"state\\\" formControlName=\\\"state\\\" [value]=\\\"controls.state.value\\\" (change)=\\\"saveState.click()\\\">\\n                        <md-option *ngFor=\\\"let stateStr of stateList\\\" [value]=\\\"stateStr\\\">{{stateStr}}</md-option>\\n                    </md-select>\\n                    <md-icon #saveState mdSuffix (click)=\\\"save(controls.state, 'state')\\\">\\n                        <i class=\\\"material-icons\\\">save</i>\\n                    </md-icon>\\n                </span>\\n            </div>\\n        </div><!-- col 1 -->\\n\\n        <div class=\\\"col-md-6\\\">\\n            <div class=\\\"form-group\\\">\\n                <label for=\\\"zip\\\">ZIP Code:</label><br>\\n                <span *ngIf=\\\"!editFlags.get('zip')\\\" class=\\\"classic-link\\\" (click)=\\\"setEditable('zip')\\\" title=\\\"edit\\\">\\n                    {{controls.zip.value}}<i class=\\\"material-icons\\\">&#xe254;</i>\\n                </span>\\n                <span *ngIf=\\\"editFlags.get('zip')\\\">\\n                    <md-input-container class=\\\"input-infix\\\">\\n                        <input mdInput id=\\\"zip\\\" formControlName=\\\"zip\\\" (keyup.enter)=\\\"saveZip.click()\\\" autocomplete=\\\"on\\\" maxlength=\\\"5\\\">\\n                        <md-icon #saveZip mdSuffix (click)=\\\"save(controls.zip, 'zip')\\\">\\n                            <i class=\\\"material-icons\\\">save</i>\\n                        </md-icon>\\n                        <md-error>Required</md-error>\\n                    </md-input-container>\\n                </span>\\n            </div>\\n            \\n            <div class=\\\"form-group\\\">\\n                <label for=\\\"phone\\\">Phone Number:</label><br>\\n                <span *ngIf=\\\"!editFlags.get('phone')\\\" class=\\\"classic-link\\\" (click)=\\\"setEditable('phone')\\\" title=\\\"edit\\\">\\n                    {{controls.phone.value}}<i class=\\\"material-icons\\\">&#xe254;</i>\\n                </span>\\n                <span *ngIf=\\\"editFlags.get('phone')\\\">\\n                    <md-input-container class=\\\"input-infix\\\">\\n                        <input mdInput id=\\\"phone\\\" formControlName=\\\"phone\\\" (keyup.enter)=\\\"savePhone.click()\\\" autocomplete=\\\"on\\\" maxlength=\\\"12\\\">\\n                        <md-icon #savePhone mdSuffix (click)=\\\"save(controls.phone, 'phone')\\\">\\n                            <i class=\\\"material-icons\\\">save</i>\\n                        </md-icon>\\n                        <md-error>Required</md-error>\\n                    </md-input-container>\\n                </span>\\n            </div>\\n        </div><!-- col 2 -->\\n\\n    </div><br><br> <!-- row -->\\n\\n    <h2 class>Password</h2>\\n    <hr>\\n    <div class=\\\"row\\\">\\n            \\n        <div class=\\\"col-md-6\\\">\\n            <button md-raised-button color=\\\"primary\\\" class=\\\"button-md\\\" *ngIf=\\\"!editFlags.get('password')\\\" (click)=\\\"setEditable('password')\\\">\\n                Update Password\\n            </button>\\n\\n            <ng-container *ngIf=\\\"editFlags.get('password')\\\">\\n                <div class=\\\"form-group\\\">\\n                    <md-input-container class=\\\"full-width\\\">\\n                        <input mdInput type=\\\"password\\\" placeholder=\\\"Current Password\\\" id=\\\"password\\\"\\n                         formControlName=\\\"currentPassword\\\" (keyup.enter)=\\\"savePassword()\\\" required>\\n                        <md-error>Required</md-error>\\n                    </md-input-container>\\n                </div>\\n                \\n                <div class=\\\"form-group\\\">\\n                    <md-input-container class=\\\"full-width\\\">\\n                        <input mdInput type=\\\"password\\\" placeholder=\\\"New Password\\\" id=\\\"password\\\" formControlName=\\\"password\\\" (keyup.enter)=\\\"savePassword()\\\" required>\\n                        <md-error>Required</md-error>\\n                    </md-input-container>\\n                </div>\\n\\n                <div class=\\\"form-group\\\">\\n                    <md-input-container class=\\\"full-width\\\">\\n                        <input mdInput type=\\\"password\\\" placeholder=\\\"Confirm Password\\\" id=\\\"password\\\" formControlName=\\\"confirmPassword\\\" (keyup.enter)=\\\"savePassword()\\\" required>\\n                        <md-error>Required</md-error>\\n                    </md-input-container>\\n                </div>\\n\\n                <button md-raised-button color=\\\"primary\\\" class=\\\"button-md\\\" (click)=\\\"savePassword()\\\">Save</button>\\n                <button md-raised-button color=\\\"primary\\\" class=\\\"button-md\\\" (click)=\\\"this.editFlags.set('password', false)\\\">Cancel</button>\\n            </ng-container>\\n        </div><!-- col -->\\n\\n    </div><!-- row -->\\n\\n</div><!-- container -->\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/User Name/ConnectFood/client/src/app/authentication/app-user-info/app-user-info.component.html\n// module id = ../../../../../client/src/app/authentication/app-user-info/app-user-info.component.html\n// module chunks = main","import { Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators, AbstractControl, FormControl, ValidatorFn } from '@angular/forms';\nimport { Observable } from \"rxjs/Observable\";\nimport { Subscription } from \"rxjs/Subscription\";\n\nimport { AppUserUpdateService } from \"./app-user-update.service\";\nimport { SessionDataService } from \"../../common-util/session-data.service\";\nimport { FoodWebBusyConfig } from \"../../common-util/food-web-busy-config\";\n\nimport { AppUserInfo } from \"../../../../../shared/authentication/app-user-info\";\nimport { Validation } from \"../../../../../shared/common-util/validation\";\nimport { FoodWebResponse } from \"../../../../../shared/message-protocol/food-web-response\";\n\n\n@Component({\n    selector: 'app-app-user-info',\n    templateUrl: './app-user-info.component.html',\n    styleUrls: ['./app-user-info.component.css'],\n    providers: [AppUserUpdateService]\n})\nexport class AppUserInfoComponent {\n    \n    private stateList: string[];\n    \n    private isOrganization: boolean;\n    private emailLabel: string;\n    private firstNameLabel: string;\n    private lastNameLabel: string;\n    \n    private appUserInfoForm: FormGroup;\n    private editFlags: Map<string, boolean>;\n    private busySaveConfig: FoodWebBusyConfig;\n\n\n    constructor(\n        private formBuilder: FormBuilder,\n        private appUserUpdateService: AppUserUpdateService,\n        private sessionDataService: SessionDataService\n    ) {\n        let appUserInfo: AppUserInfo = sessionDataService.getAppUserSessionData();\n        this.stateList = ['CA', 'NY', 'IN'];\n\n        // Set some form labels based off of whether or not user is an organization.\n        this.isOrganization = (appUserInfo.organizationName != null);\n        if (this.isOrganization) {\n            this.emailLabel = 'Organization Email';\n            this.firstNameLabel = 'Admin First Name';\n            this.lastNameLabel = 'Admin Last Name';\n        }\n        else {\n            this.emailLabel = 'Email';\n            this.firstNameLabel = 'First Name';\n            this.lastNameLabel = 'Last Name';\n        }\n\n        this.appUserInfoForm = new FormGroup({});\n        this.editFlags = new Map<string, boolean>();\n\n        // Loader symbol with this configuration will be displayed if we are stuck saving for a noticably long period of time.\n        this.busySaveConfig = new FoodWebBusyConfig('Saving');\n\n        // Fill the form group model based off of the properties found in AppUserInfo.\n        // Also, add edit flags based off of the properties.\n        for (let property in appUserInfo) {\n            if (appUserInfo.hasOwnProperty(property)) {\n                let validators: ValidatorFn[] = [Validators.required];\n\n                // Add additional needed validators for email and password fields.\n                switch(property) {\n                    case 'email':       validators.push(Validators.email);                                  break;\n                    case 'zip':         validators.push(Validators.pattern(Validation.ZIP_REGEX));          break;\n                    case 'phone':       validators.push(Validators.pattern(Validation.PHONE_REGEX));        break;\n                }\n\n                let initValue: any = (appUserInfo[property] == null) ? '' : appUserInfo[property];\n                this.appUserInfoForm.addControl(property, new FormControl(initValue.toString(), validators));\n                this.editFlags.set(property, false);\n            }\n        }\n\n        // Initialize form with elements that are not part of AppUserInfo object.\n        this.appUserInfoForm.addControl('password', new FormControl('', [Validators.pattern(Validation.PASSWORD_REGEX)]));\n        this.appUserInfoForm.addControl('currentPassword', new FormControl('', [Validators.required, Validators.pattern(Validation.PASSWORD_REGEX),\n                                                                                this.passwordConfirmed.bind(this)]));\n        this.appUserInfoForm.addControl('confirmPassword', new FormControl('', [Validators.required, Validators.pattern(Validation.PASSWORD_REGEX),\n                                                                                this.passwordConfirmed.bind(this)]));\n    }\n\n\n    /**\n     * Sets a field in the App User Info form to be editable and focuses the form control used for editing.\n     * @param editFormControlId The id of the form control that will be used for editing.\n     */\n    private setEditable(editFormControlId: string): void {\n        // Reset the validation state of the fields involved in the edit.\n        this.controls[editFormControlId].markAsUntouched();\n        if (editFormControlId === 'password') {\n            this.controls.currentPassword.markAsUntouched();\n            this.controls.confirmPassword.markAsUntouched();\n        }\n\n        this.editFlags.set(editFormControlId, true);\n\n        // Force processing of form input element after it is shown (via *ngIf) by inserting into end of event queue (via setTimeout).\n        setTimeout(() => {\n            document.getElementById(editFormControlId).focus();\n        }, 0);\n    }\n\n\n    /**\n     * Saves the new password value.\n     */\n    private savePassword(): void {\n        // Make sure we can see valid state.\n        this.forceValidation(this.controls.currentPassword);\n        this.forceValidation(this.controls.password);\n        this.forceValidation(this.controls.confirmPassword);\n\n        // First validate the current password and confirm password fields before saving the password.\n        if (   this.isValid(this.controls.currentPassword)\n            && this.isValid(this.controls.confirmPassword))\n        {\n            this.save(this.controls.password, 'password');\n        }\n    }\n\n\n    /**\n     * Saves the value of a field and disables edit mode for the given field if the value of the field is valid.\n     * @param saveFormControl The form control that the save is associated with.\n     * @param saveFormControlName The name of the form control used for switching off the associated edit flag.\n     */\n    private save(saveFormControl: AbstractControl, saveFormControlName: string): void {\n        // Make sure we can see valid state.\n        this.forceValidation(saveFormControl);\n\n        if (this.isValid(saveFormControl)) {\n            let appUserInfoUpdate: AppUserInfo = new AppUserInfo();\n\n            // Grab current password entered by user if this is a password update.\n            let newPassword: string = null;\n            let currentPassword: string = null;\n            if (saveFormControlName === 'password') {\n                newPassword = saveFormControl.value;\n                currentPassword = this.controls.currentPassword.value;\n            }\n            else {\n                // Only send entry that is being saved to the server. AppUserInfo field will have same name as corresponding view model form control!\n                appUserInfoUpdate[saveFormControlName] = saveFormControl.value;\n            }\n\n            // Send save field update to server and listen for response.\n            let observable: Observable<FoodWebResponse> = this.appUserUpdateService.updateAppUserInfo(appUserInfoUpdate, newPassword, currentPassword);\n            this.busySaveConfig.busy = observable.subscribe((response: FoodWebResponse) => {\n                if (response.success) {\n                    this.editFlags.set(saveFormControlName, false); // Set edit off for this valid field.\n                }\n                else {\n                    console.log(response.message);\n                }\n            });\n        }\n    }\n\n\n    /**\n     * Validator used to check if the password and confirm password values are equal.\n     * @return null if they are equal, or { passwordConfirmed: false } object if they are not.\n     */\n    private passwordConfirmed(): { passwordConfirmed: boolean } \n    {\n        // If the password and confirm password fields match or the fields do not yet exist.\n        if (   this.controls.password == null\n            || this.controls.confirmPassword == null\n            || this.controls.password.value === this.controls.confirmPassword.value)\n        {\n            return null; // Valid (return no error flag)\n        }\n\n        return { passwordConfirmed: true }; // Invalid (return passwordConfirmed error flag)\n    }\n\n\n    /**\n     * Forces a given field to validate by marking it touched and dirty.\n     * @param validField The field to force validation on.\n     */\n    private forceValidation(validField: AbstractControl): void {\n        validField.markAsTouched();\n        validField.markAsDirty();\n    }\n\n\n    /**\n     * Checks if a given field is valid.\n     * @param validField The field to check for validity.\n     * @return true if the field is valid, false if not.\n     */\n    private isValid(validField: AbstractControl): boolean {\n        return (validField.errors == null || !validField.touched || !validField.dirty);\n    }\n\n\n    /**\n     * Gets a raw list of the form controls.\n     */\n    private get controls(): { [key: string]: AbstractControl } {\n        return this.appUserInfoForm.controls;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// C:/Users/User Name/ConnectFood/client/src/app/authentication/app-user-info/app-user-info.component.ts","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\n\nimport { RequestService, Response } from '../../common-util/request.service';\n\nimport { UpdateAppUserRequest } from '../../../../../shared/authentication/update-app-user-message';\nimport { AppUserInfo } from \"../../../../../shared/authentication/app-user-info\";\nimport { FoodWebResponse } from \"../../../../../shared/message-protocol/food-web-response\";\n\n\n@Injectable()\nexport class AppUserUpdateService {\n\n    constructor(\n        private requestService: RequestService\n    ) { }\n\n\n    /**\n     * Sends App User Update Info to the server and listens for a response.\n     * @param appUserInfoUpdate Contains the update information. Any non-null values will be used to update App User information.\n     * @param newPassword The password update.\n     * @param currentPassword Only required when the password is being updated. Should contain the current password of the user.\n     */\n    public updateAppUserInfo(appUserInfoUpdate: AppUserInfo, newPassword?: string, currentPassword?: string): Observable<FoodWebResponse> {\n\n        let body: UpdateAppUserRequest = new UpdateAppUserRequest(appUserInfoUpdate, newPassword, currentPassword);\n        let observer: Observable<Response> = this.requestService.post('/authentication/updateAppUser', body);\n\n        return observer.map((response: Response): FoodWebResponse => {\n            let appUserUpdateResponse: FoodWebResponse = response.json();\n            console.log(appUserUpdateResponse.message);\n\n            // TODO: generate login popup if session ended and resend request upon login response.\n\n            return appUserUpdateResponse;\n        });\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// C:/Users/User Name/ConnectFood/client/src/app/authentication/app-user-info/app-user-update.service.ts","/**\n * Contains state data for the Login Component.\n */\nexport class LoginModel {\n\n    public loginError : boolean;\n    public username : string;\n    public password : string;\n\n    constructor() {\n        this.loginError = false;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// C:/Users/User Name/ConnectFood/client/src/app/authentication/login/login-model.ts","exports = module.exports = require(\"../../../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \":host {\\r\\n\\t-webkit-box-flex: 1;\\r\\n\\t    -ms-flex-positive: 1;\\r\\n\\t        flex-grow: 1;\\r\\n    display: -webkit-box;\\r\\n    display: -ms-flexbox;\\r\\n    display: flex;\\r\\n    text-align: center;\\r\\n\\t-webkit-box-pack: center;\\r\\n\\t    -ms-flex-pack: center;\\r\\n\\t        justify-content: center;\\r\\n\\t-webkit-box-align: center;\\r\\n\\t    -ms-flex-align: center;\\r\\n\\t        align-items: center;\\r\\n}\\r\\n\\r\\nmd-form-field {\\r\\n    font-size: 25px;\\r\\n    width: 100%;\\r\\n}\\r\\n\\r\\n.modal-header {\\r\\n    background-color: #222222;\\r\\n    color: white;\\r\\n}\\r\\n\\r\\n#login-div {\\r\\n    text-align: right;\\r\\n}\\r\\n\\r\\n.close {\\r\\n    color: white;\\r\\n\\tdisplay: block;\\r\\n    border-radius: 50%;\\r\\n    font-size: 40px;\\r\\n    margin: 0px;\\r\\n    padding: 0px;\\r\\n    width: 40px;\\r\\n    height: 40px;\\r\\n    line-height: 40px;\\r\\n    text-align: center;\\r\\n    outline: none;\\r\\n    transition: -webkit-transform .8s ease-in-out;\\r\\n    transition: transform .8s ease-in-out;\\r\\n    transition: transform .8s ease-in-out, -webkit-transform .8s ease-in-out;\\r\\n}\\r\\n\\r\\n.close:hover {\\r\\n    -webkit-transform: rotate(180deg);\\r\\n    transform: rotate(180deg);\\r\\n}\\r\\n\\r\\n#loginErr {\\r\\n\\ttext-align: center;\\r\\n\\tcolor: red;\\r\\n}\\r\\n\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/User Name/ConnectFood/client/src/app/authentication/login/login.component.css\n// module id = ../../../../../client/src/app/authentication/login/login.component.css\n// module chunks = main","module.exports = \"<div class=\\\"modal-dialog\\\">\\n\\t<div class=\\\"modal-content\\\">\\n\\t\\t<div class=\\\"modal-header\\\" style=\\\"background-color: #222222\\\">\\n\\t\\t\\t<h1 class=\\\"modal-title\\\">Login</h1>\\n\\t\\t\\t<button type=\\\"button\\\" class=\\\"close\\\" (click)=\\\"close()\\\">&times;</button>\\n\\t\\t</div>\\n\\t\\t<div class=\\\"modal-body\\\">\\n\\t\\t\\t<form ngNativeValidate (submit)=\\\"loginUser($event)\\\">\\n                <div>\\n                    <md-form-field>\\n                        <input #email mdInput placeholder=\\\"email\\\" id=\\\"email\\\" name=\\\"username\\\"\\n                         [(ngModel)]=\\\"loginModel.username\\\" type=\\\"text\\\" required spellcheck=\\\"false\\\" autocomplete=\\\"on\\\">\\n                    </md-form-field>\\n                </div>\\n                <div>\\n                    <md-form-field>\\n                        <input #password mdInput placeholder=\\\"password\\\" id=\\\"password\\\" name=\\\"password\\\" [(ngModel)]=\\\"loginModel.password\\\" type=\\\"password\\\" required autocomplete=\\\"on\\\">\\n                    </md-form-field>\\n                </div>\\n                <div id=\\\"login-div\\\" class=\\\"input\\\">\\n                    <button md-raised-button color=\\\"primary\\\" class=\\\"button-md\\\" type=\\\"submit\\\">Login</button>\\n                </div>\\n\\t\\t\\t</form>\\n\\t\\t</div>\\n\\t\\t<div class=\\\"modal-footer\\\" *ngIf=\\\"loginModel.loginError\\\">\\n\\t\\t\\t<p id=\\\"loginErr\\\">Incorrect login information. Please Try Again.</p>\\n\\t\\t</div>\\n\\t</div>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/User Name/ConnectFood/client/src/app/authentication/login/login.component.html\n// module id = ../../../../../client/src/app/authentication/login/login.component.html\n// module chunks = main","import { Component, OnInit } from '@angular/core';\nimport { DialogComponent, DialogService } from \"ng2-bootstrap-modal\";\nimport { Router } from '@angular/router';\nimport { Observable } from \"rxjs/Observable\";\n\nimport { LoginService } from './login.service';\nimport { LoginModel } from './login-model'\n\n@Component({\n    selector: 'app-login',\n    templateUrl: './login.component.html',\n    styleUrls: ['./login.component.css'],\n    providers: [LoginService]\n})\nexport class LoginComponent extends DialogComponent<null, boolean> implements OnInit {\n\n    private loginModel: LoginModel;\n\n    constructor(\n        public dialogService: DialogService,\n        private authenticationService: LoginService\n    ) {\n        super(dialogService);\n        this.loginModel = new LoginModel();\n    }\n\n    public ngOnInit(): void {\n        // Required to fix bug where autofocus does not work when opening dialog more than once (cannot just use HTML autofocus property)!\n        let emailInput: HTMLInputElement = document.getElementById('email') as HTMLInputElement;\n        emailInput.focus();\n    }\n\n    public static display(dialogService: DialogService): Observable<boolean> {\n        return dialogService.addDialog(\n            LoginComponent,\n            // Dialog Initalization Data\n            null,\n            // DialogOptions\n            {\n                closeByClickingOutside: true,\n                backdropColor: '#444444',\n            }\n        );\n    }\n\n    private loginUser(event) {\n        event.preventDefault();\n\n        var observer = this.authenticationService.login(this.loginModel);\n        // This is the promise we get\n        observer.subscribe(\n            data => {\n                // See if Login is a success.\n                if (data.success) this.close();\n                else              this.loginModel.loginError = true;\n            },\n            error => {\n                console.log(error);\n                // Shouldn't happen!\n            }\n        );\n\n        // TODO: We should put some loading symbol in login popup here!!!\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// C:/Users/User Name/ConnectFood/client/src/app/authentication/login/login.component.ts","import { Injectable } from '@angular/core';\r\nimport { Http, Headers, Response } from '@angular/http';\r\nimport { Observable } from 'rxjs/Observable';\r\n\r\nimport { LoginModel } from './login-model'\r\nimport { SessionDataService } from '../../common-util/session-data.service';\r\n\r\nimport { LoginRequest, LoginResponse } from '../../../../../shared/authentication/login-message';\r\nimport { AppUserInfo } from \"../../../../../shared/authentication/app-user-info\";\r\n\r\n\r\n@Injectable()\r\nexport class LoginService {\r\n\r\n    constructor(\r\n        private http: Http,\r\n        private sessionDataService: SessionDataService\r\n    ) { }\r\n\r\n    public login(loginModel: LoginModel): Observable<{ success: boolean, message: string}> {\r\n\r\n        let headers = new Headers({\r\n            'Content-Type': 'application/json'\r\n        });\r\n\r\n        // NOTE: Should user raw http request here instead of RequestService wrapper since RequestService depends on this LoginService (prevent circular dependency)!\r\n        let observer: Observable<Response> = this.http.post('/authentication/login', new LoginRequest(loginModel.username, loginModel.password), { headers: headers })\r\n\r\n        return observer.map((response: Response): any /* AppUserInfo */ => {\r\n            \r\n            let loginResponse: LoginResponse = response.json();\r\n            console.log(loginResponse.message);\r\n\r\n            if (loginResponse.success) {\r\n                this.sessionDataService.updateAppUserSessionData(loginResponse.appUserInfo);\r\n            }\r\n\r\n            return { success: loginResponse.success, message: loginResponse.message };\r\n        });\r\n    }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// C:/Users/User Name/ConnectFood/client/src/app/authentication/login/login.service.ts","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { Router } from '@angular/router';\n\nimport { RequestService } from \"../../common-util/request.service\";\nimport { SessionDataService } from '../../common-util/session-data.service';\n\n@Injectable()\nexport class LogoutService {\n\n    constructor(\n        private router: Router,\n        private requestService: RequestService,\n        private sessionDataService: SessionDataService,\n    ) { }\n\n    public logout(): void {\n        this.requestService.get('/authentication/logout').subscribe(() => {\n            this.sessionDataService.clearSessionData();\n            this.router.navigate(['/home']);\n        });\n        // Not interested in the response...\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// C:/Users/User Name/ConnectFood/client/src/app/authentication/misc/logout.service.ts","exports = module.exports = require(\"../../../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \"#signup-error {\\r\\n\\ttext-align: center;\\r\\n    color: red;\\r\\n    font-weight: bold;\\r\\n    font-size: 20px;\\r\\n}\\r\\n\\r\\nlabel, md-radio-group {\\r\\n    font-weight: bold;\\r\\n    font-size: 22px;\\r\\n}\\r\\n\\r\\nh2 {\\r\\n    font-weight: bold;\\r\\n}\\r\\n\\r\\n.button-md {\\r\\n    margin-left: 15px;\\r\\n}\\r\\n\\r\\nmd-input-container, md-select {\\r\\n    width: 100%;\\r\\n}\\r\\n\\r\\nmd-select {\\r\\n    margin-bottom: 20px;\\r\\n}\\r\\n\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/User Name/ConnectFood/client/src/app/authentication/signup/signup.component.css\n// module id = ../../../../../client/src/app/authentication/signup/signup.component.css\n// module chunks = main","module.exports = \"<div *ngIf=\\\"!signupComplete\\\" class=\\\"container\\\">\\r\\n\\r\\n    <form ngNativeValidate (submit)=\\\"signupUser($event)\\\">\\r\\n        <h2 class=\\\"center-text\\\">What Type of User Are You</h2>\\r\\n        <hr>\\r\\n        <md-radio-group class=\\\"row center-text\\\" required>\\r\\n            <div class=\\\"col-md-6\\\">\\r\\n                <md-radio-button name=\\\"accountType\\\" value=\\\"business\\\" (click)=\\\"setAppUserType('business')\\\">\\r\\n                    Business\\r\\n                </md-radio-button>\\r\\n            </div>\\r\\n            <div class=\\\"col-md-6\\\">\\r\\n                <md-radio-button name=\\\"accountType\\\" value=\\\"personal\\\" (click)=\\\"setAppUserType('personal')\\\">\\r\\n                    Personal\\r\\n                </md-radio-button>\\r\\n            </div>\\r\\n        </md-radio-group>\\r\\n\\r\\n        <ng-container *ngIf=\\\"appUserTypeSelected\\\">\\r\\n            <br><br><br><br>\\r\\n\\r\\n            <h2 class=\\\"center-text\\\">What Will You Be Doing</h2>\\r\\n            <hr>\\r\\n            <md-radio-group class=\\\"row center-text\\\" required>\\r\\n                <div class=\\\"col-md-4\\\">\\r\\n                    <md-radio-button name=\\\"accountFunction\\\" value=\\\"donor\\\" (click)=\\\"setAppUserFunction('donor')\\\">\\r\\n                        Donating\\r\\n                    </md-radio-button>\\r\\n                </div>\\r\\n                <div class=\\\"col-md-4\\\">\\r\\n                    <md-radio-button name=\\\"accountFunction\\\" value=\\\"receiver\\\" (click)=\\\"setAppUserFunction('receiver')\\\">\\r\\n                        Receiving\\r\\n                    </md-radio-button>\\r\\n                </div>\\r\\n                <div class=\\\"col-md-4\\\">\\r\\n                    <md-radio-button name=\\\"accountFunction\\\" value=\\\"both\\\" (click)=\\\"setAppUserFunction('both')\\\">\\r\\n                        Both\\r\\n                    </md-radio-button>\\r\\n                </div>\\r\\n            </md-radio-group>\\r\\n            <br><br><br><br>\\r\\n        </ng-container>\\r\\n\\r\\n        <ng-container *ngIf=\\\"appUserTypeSelected && appUserFunctionSelected\\\">\\r\\n            <h2 class=\\\"center-text\\\">Credentials and Contact Info</h2>\\r\\n            <hr>\\r\\n            <div class=\\\"row\\\">\\r\\n                <div class=\\\"col-md-6\\\">\\r\\n                    <md-input-container class=\\\"form-group\\\">\\r\\n                        <input mdInput [placeholder]=\\\"emailLabel\\\" type=\\\"email\\\" name=\\\"username\\\" [(ngModel)]=\\\"appUserSignupInfo.email\\\" required autocomplete=\\\"off\\\">\\r\\n                    </md-input-container>\\r\\n\\r\\n                    <md-input-container class=\\\"form-group\\\">\\r\\n                        <input mdInput placeholder=\\\"Password\\\" type=\\\"password\\\" name=\\\"password\\\" [(ngModel)]=\\\"password\\\" required autocomplete=\\\"new-password\\\">\\r\\n                    </md-input-container>\\r\\n\\r\\n                    <md-input-container class=\\\"form-group\\\" *ngIf=\\\"isBusiness\\\">\\r\\n                        <input mdInput placeholder=\\\"Organization Name\\\" name=\\\"organizationName\\\" [(ngModel)]=\\\"appUserSignupInfo.organizationName\\\" required>\\r\\n                    </md-input-container>\\r\\n\\r\\n                    <md-input-container class=\\\"form-group\\\">\\r\\n                        <input mdInput [placeholder]=\\\"firstNameLabel\\\" name=\\\"fname\\\" [(ngModel)]=\\\"appUserSignupInfo.firstName\\\" required>\\r\\n                    </md-input-container>\\r\\n\\r\\n                    <md-input-container class=\\\"form-group\\\">\\r\\n                        <input mdInput [placeholder]=\\\"lastNameLabel\\\" name=\\\"lname\\\" [(ngModel)]=\\\"appUserSignupInfo.lastName\\\" required>\\r\\n                    </md-input-container>\\r\\n                </div>\\r\\n\\r\\n                <div class=\\\"col-md-6\\\">\\r\\n                    <md-input-container class=\\\"form-group\\\">\\r\\n                        <input mdInput placeholder=\\\"Street Address\\\" name=\\\"address\\\" [(ngModel)]=\\\"appUserSignupInfo.address\\\" required>\\r\\n                    </md-input-container>\\r\\n\\r\\n                    <md-input-container class=\\\"form-group\\\">\\r\\n                        <input mdInput placeholder=\\\"City\\\" name=\\\"city\\\" [(ngModel)]=\\\"appUserSignupInfo.city\\\" required>\\r\\n                    </md-input-container>\\r\\n\\r\\n                    <div class=\\\"form-group\\\">\\r\\n                        <md-select name=\\\"state\\\" placeholder=\\\"State\\\" [(ngModel)]=\\\"appUserSignupInfo.state\\\" required>\\r\\n                            <md-option *ngFor=\\\"let stateStr of stateList\\\" [value]=\\\"stateStr\\\">{{stateStr}}</md-option>\\r\\n                        </md-select>\\r\\n                    </div>\\r\\n\\r\\n                    <md-input-container class=\\\"form-group\\\">\\r\\n                        <input mdInput placeholder=\\\"ZIP Code\\\" name=\\\"zip\\\" maxlength=\\\"5\\\" [(ngModel)]=\\\"appUserSignupInfo.zip\\\" required>\\r\\n                    </md-input-container>\\r\\n                    \\r\\n                    <md-input-container class=\\\"form-group\\\">\\r\\n                        <input mdInput placeholder=\\\"Phone\\\" name=\\\"phone\\\" [(ngModel)]=\\\"appUserSignupInfo.phone\\\" minlength=\\\"12\\\" maxlength=\\\"12\\\" required>\\r\\n                    </md-input-container>\\r\\n                </div>\\r\\n\\r\\n                <button md-raised-button color=\\\"primary\\\" class=\\\"button-md\\\" type=\\\"submit\\\">Submit</button>\\r\\n            </div>\\r\\n        </ng-container>\\r\\n    </form>\\r\\n    <div *ngIf=\\\"signupError != null\\\" id=\\\"signup-error\\\">{{signupError}}</div>\\r\\n</div>\\r\\n\\r\\n\\r\\n<div *ngIf=\\\"signupComplete\\\" class=\\\"container\\\">\\r\\n    <p>\\r\\n        Thank-you for joining Food Web!\\r\\n    </p>\\r\\n    <br>\\r\\n    \\r\\n    <p *ngIf=\\\"isBusiness\\\">\\r\\n        We will contact you by phone to verify your signup. Please allow up to 2 business days to receive a call from us.\\r\\n    </p>\\r\\n    <p *ngIf=\\\"!isBusiness\\\">\\r\\n        A confirmation link will be sent to you via email. Please follow the link to confirm your signup.\\r\\n    </p>\\r\\n</div>\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/User Name/ConnectFood/client/src/app/authentication/signup/signup.component.html\n// module id = ../../../../../client/src/app/authentication/signup/signup.component.html\n// module chunks = main","import { Router } from '@angular/router';\r\nimport { Component, OnInit } from '@angular/core';\r\n\r\nimport { SignupService } from './signup.service'\r\n\r\nimport { AppUserInfo } from \"../../../../../shared/authentication/app-user-info\";\r\nimport { FoodWebResponse } from \"../../../../../shared/message-protocol/food-web-response\";\r\n\r\n@Component({\r\n    selector: 'app-signup',\r\n    templateUrl: './signup.component.html',\r\n    styleUrls: ['./signup.component.css'],\r\n    providers: [SignupService]\r\n})\r\nexport class SignupComponent implements OnInit {\r\n\r\n    private appUserSignupInfo: AppUserInfo;\r\n    private password: string;\r\n    private stateList: string[];\r\n    private signupError: string;\r\n    private signupComplete: boolean;\r\n\r\n    private appUserTypeSelected: boolean;\r\n    private appUserFunctionSelected: boolean;\r\n    private accountFunction: string;\r\n\r\n    // Text that should be displayed in form labels based off of selected account attributes.\r\n    private isBusiness: boolean;\r\n    private emailLabel: string;\r\n    private firstNameLabel: string;\r\n    private lastNameLabel: string;\r\n\r\n    constructor(\r\n        private router: Router,\r\n        private signupService: SignupService\r\n    ) {\r\n        this.appUserSignupInfo = new AppUserInfo();\r\n        this.stateList = ['CA', 'NY', 'IN'];\r\n        this.signupError = null;\r\n        this.signupComplete = false;\r\n\r\n        this.appUserTypeSelected = false;\r\n        this.appUserFunctionSelected = false;\r\n        this.isBusiness = false;\r\n    }\r\n\r\n    ngOnInit() { }\r\n\r\n    private signupUser(event: Event): void {\r\n        event.preventDefault();\r\n\r\n        var observer = this.signupService.signup(this.appUserSignupInfo, this.password);\r\n        observer.subscribe(\r\n            // When we have no errors connecting to server.\r\n            (signupResponse: FoodWebResponse) => {\r\n                if (signupResponse.success) {\r\n                    this.signupError = null;\r\n                    this.signupComplete = true;\r\n                    scroll(0, 0);\r\n                }\r\n                else {\r\n                    this.signupError = signupResponse.message;\r\n                }\r\n            },\r\n            // When we have errors connecting to server.\r\n            (err: Error) => {\r\n                this.signupError = 'Error: could not communication with server';\r\n                console.log(err);\r\n            }\r\n        );\r\n    }\r\n\r\n    private setAppUserType(appUserType: string): void {\r\n        if (appUserType.toLowerCase() === 'personal') {\r\n            this.emailLabel = 'Email';\r\n            this.firstNameLabel = 'First Name';\r\n            this.lastNameLabel = 'Last Name';\r\n            this.isBusiness = false;\r\n        }\r\n        else {\r\n            this.emailLabel = 'Organization Email';\r\n            this.firstNameLabel = 'Admin First Name';\r\n            this.lastNameLabel = 'Admin Last Name';\r\n            this.isBusiness = true;\r\n        }\r\n\r\n        this.appUserTypeSelected = true;\r\n    }\r\n\r\n    private setAppUserFunction(appUserFunction: string): void {\r\n        // First set all possible App User functions to true, and turn certain ones off based on given function.\r\n        this.appUserSignupInfo.isDonor = true;\r\n        this.appUserSignupInfo.isReceiver = true;\r\n\r\n        switch(appUserFunction.toLowerCase()) {\r\n            case 'donor':       this.appUserSignupInfo.isReceiver = false;  break;\r\n            case 'receiver':    this.appUserSignupInfo.isDonor = false;     break;\r\n            case 'both':                                                    break;\r\n            default:            throw new Error('Incorrect App User Function set: ' + appUserFunction);\r\n        }\r\n\r\n        this.appUserFunctionSelected = true;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// C:/Users/User Name/ConnectFood/client/src/app/authentication/signup/signup.component.ts","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs/Observable';\r\n\r\nimport { RequestService, Response } from \"../../common-util/request.service\";\r\nimport { SessionDataService } from \"../../common-util/session-data.service\";\r\n\r\nimport { AppUserInfo } from \"../../../../../shared/authentication/app-user-info\";\r\nimport { SignupRequest } from \"../../../../../shared/authentication/signup-message\";\r\nimport { FoodWebResponse } from \"../../../../../shared/message-protocol/food-web-response\";\r\n\r\n\r\n@Injectable()\r\nexport class SignupService {\r\n\r\n    constructor(\r\n        private requestService: RequestService,\r\n        private sessionDataService: SessionDataService\r\n    ) { }\r\n\r\n    signup(appUserSignupInfo: AppUserInfo, password: string) {\r\n\r\n        let body: SignupRequest = new SignupRequest(appUserSignupInfo, password);\r\n        let observer: Observable<Response> = this.requestService.post('/authentication/signup', body);\r\n        \r\n        return observer.map((response: Response): FoodWebResponse => {\r\n            \r\n            let signupResponse: FoodWebResponse = response.json();\r\n            console.log(signupResponse.message);\r\n\r\n            // On successful signup, cache the App User's data in global front end session storage.\r\n            if (signupResponse.success) {\r\n                this.sessionDataService.updateAppUserSessionData(appUserSignupInfo);\r\n            }\r\n\r\n            return signupResponse;\r\n        });\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// C:/Users/User Name/ConnectFood/client/src/app/authentication/signup/signup.service.ts","exports = module.exports = require(\"../../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \"#banner {\\r\\n\\tposition: relative;\\r\\n\\twidth: 100%;\\r\\n\\tmargin-top: -75px; /*Bring the banner up to be positioned within the header just below the nav!*/\\r\\n}\\r\\n\\r\\n@media screen and (max-width: 767px) {\\r\\n\\t#banner {\\r\\n\\t\\tvisibility: hidden;\\r\\n\\t\\tposition: absolute;\\r\\n\\t}\\r\\n}\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/User Name/ConnectFood/client/src/app/banner/banner.component.css\n// module id = ../../../../../client/src/app/banner/banner.component.css\n// module chunks = main","module.exports = \"<img id=\\\"banner\\\" [src]=\\\"bannerSrc\\\" [style.height]=\\\"bannerHeight\\\">\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/User Name/ConnectFood/client/src/app/banner/banner.component.html\n// module id = ../../../../../client/src/app/banner/banner.component.html\n// module chunks = main","import { Component, OnInit, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-banner',\n  templateUrl: './banner.component.html',\n  styleUrls: ['./banner.component.css']\n})\nexport class BannerComponent implements OnInit {\n\n  @Input() bannerSrc: string;\n  @Input() bannerHeight: string;\n\n  constructor() { }\n\n  ngOnInit() {\n    \n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// C:/Users/User Name/ConnectFood/client/src/app/banner/banner.component.ts","exports = module.exports = require(\"../../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \"label {\\r\\n    padding-bottom: 0px;\\r\\n    margin-bottom: 0px;\\r\\n}\\r\\n\\r\\n@media only screen and (max-width: 1200px) {\\r\\n    #food-listings {\\r\\n        float: none;\\r\\n        padding-left: 40px;\\r\\n        margin-left: auto;\\r\\n        margin-right: auto;\\r\\n    }\\r\\n}\\r\\n\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/User Name/ConnectFood/client/src/app/cart/cart.component.css\n// module id = ../../../../../client/src/app/cart/cart.component.css\n// module chunks = main","module.exports = \"<div class=\\\"container-fluid\\\">\\r\\n    <div id=\\\"cart-row\\\" class=\\\"row\\\" style=\\\"padding-top:2vh\\\">\\r\\n        <div class=\\\"col-md-3\\\" id=\\\"filters\\\">\\r\\n            <app-food-listings-filters header=\\\"Cart Filters\\\" [formGroup]=\\\"foodListingsFilters.filtersForm\\\"\\r\\n             id=\\\"food-listings-filters\\\" [defaultLatestExpireNow]=\\\"false\\\" #foodListingsFilters>\\r\\n\\r\\n                <ng-container *ngIf=\\\"isDonorAndReceiver\\\" top>\\r\\n                    <h4>Listings Status:</h4>\\r\\n                    <div class=\\\"form-group\\\">\\r\\n                        <md-radio-group formControlName=\\\"listingsStatus\\\">\\r\\n                            <label for=\\\"claimed\\\" class=\\\"checkbox-compress\\\">\\r\\n                                <md-radio-button type=\\\"radio\\\" id=\\\"claimed\\\" name=\\\"listingsStatus\\\" checked=\\\"checked\\\" [value]=\\\"LISTINGS_STATUS.myClaimedListings\\\">\\r\\n                                    Claimed\\r\\n                                </md-radio-button>\\r\\n                            </label>\\r\\n                            <br>\\r\\n                            <label for=\\\"donated\\\" class=\\\"checkbox-compress\\\">\\r\\n                                <md-radio-button type=\\\"radio\\\" id=\\\"donated\\\" name=\\\"listingsStatus\\\" [value]=\\\"LISTINGS_STATUS.myDonatedListings\\\">\\r\\n                                    Donated\\r\\n                                </md-radio-button>\\r\\n                            </label>\\r\\n                        </md-radio-group>\\r\\n                    </div>\\r\\n                </ng-container>\\r\\n\\r\\n            </app-food-listings-filters>\\r\\n        </div>\\r\\n\\r\\n        <div id=\\\"cart-listings-col\\\" class=\\\"col-md-9\\\">\\r\\n            <app-food-listings [header]=\\\"getFoodListingsTitle()\\\" id=\\\"food-listings\\\" #foodListings>\\r\\n                <ng-container details-modal-footer>\\r\\n                    <button md-raised-button color=\\\"primary\\\" class=\\\"button-md\\\" *ngIf=\\\"isClaimedCart()\\\" (click)=\\\"unclaimSelectedFoodListing()\\\">Unclaim</button>\\r\\n                    <button md-raised-button color=\\\"primary\\\" class=\\\"button-md\\\" *ngIf=\\\"isDonatedCart()\\\" (click)=\\\"removeSelectedFoodListing()\\\">Remove Donation</button>\\r\\n                </ng-container>\\r\\n            </app-food-listings>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/User Name/ConnectFood/client/src/app/cart/cart.component.html\n// module id = ../../../../../client/src/app/cart/cart.component.html\n// module chunks = main","import { Component, OnInit, NgModule, Injectable, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormGroup, FormControl } from '@angular/forms';\r\nimport { NgbModule, NgbModal, ModalDismissReasons, NgbDateStruct } from '@ng-bootstrap/ng-bootstrap';\r\nimport { Observable } from \"rxjs/Observable\";\r\n\r\nimport { FoodListingsFiltersComponent } from \"../food-listings/food-listings-filters/food-listings-filters.component\";\r\nimport { FoodListingsComponent } from \"../food-listings/food-listings.component\";\r\nimport { ClaimFoodListingService } from \"../food-listings/claim-unclaim-food-listing.service\";\r\nimport { AddRemoveFoodListingService } from \"../food-listings/add-remove-food-listing.service\";\r\nimport { SessionDataService } from '../common-util/session-data.service';\r\n\r\nimport { FoodListing } from \"../../../../shared/food-listings/food-listing\";\r\nimport { FoodListingsFilters, LISTINGS_STATUS } from \"../../../../shared/food-listings/food-listings-filters\";\r\nimport { AppUserInfo } from \"../../../../shared/authentication/app-user-info\";\r\n\r\n\r\n@Component({\r\n    selector: 'app-cart',\r\n    templateUrl: './cart.component.html',\r\n    styleUrls: ['./cart.component.css'],\r\n    providers: [\r\n        SessionDataService,\r\n        ClaimFoodListingService,\r\n        AddRemoveFoodListingService\r\n    ]\r\n})\r\nexport class CartComponent implements OnInit {\r\n\r\n    // Need to declare LISTINGS_STATUS enum inside component to be used in the HTML template!\r\n    private readonly LISTINGS_STATUS: typeof LISTINGS_STATUS = LISTINGS_STATUS;\r\n    private isDonorAndReceiver: boolean;\r\n\r\n    @ViewChild('foodListingsFilters') private foodListingsFiltersComponent: FoodListingsFiltersComponent;\r\n    @ViewChild('foodListings') private foodListingsComponent: FoodListingsComponent;\r\n\r\n\r\n    constructor(\r\n        private sessionDataService: SessionDataService,\r\n        private claimFoodListingService: ClaimFoodListingService,\r\n        private addRemoveFoodListingService: AddRemoveFoodListingService\r\n    ) { }\r\n\r\n\r\n    ngOnInit() {\r\n        const appUserInfo: AppUserInfo = this.sessionDataService.getAppUserSessionData();\r\n\r\n        /**\r\n         *  Retrieves user data from session storage to \r\n         *  determine initial cart type and mutability of cart type\r\n         */\r\n        this.isDonorAndReceiver = (appUserInfo.isReceiver && appUserInfo.isDonor);\r\n        if (appUserInfo.isReceiver) {\r\n            // If both receiver and donor, then default to receiver mode!\r\n            this.foodListingsFiltersComponent.addControl('listingsStatus', new FormControl(LISTINGS_STATUS.myClaimedListings));\r\n        } \r\n        else {\r\n            this.foodListingsFiltersComponent.addControl('listingsStatus', new FormControl(LISTINGS_STATUS.myDonatedListings));\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Executed after all of the view children have been initialized (so safest to interact with them now).\r\n     */\r\n    ngAfterViewInit() {\r\n        this.foodListingsComponent.refreshFoodListings(this.foodListingsFiltersComponent.getFilterValues());\r\n        this.foodListingsFiltersComponent.onFiltersUpdate(this.foodListingsComponent.refreshFoodListings.bind(this.foodListingsComponent));\r\n    }\r\n\r\n\r\n    private getFoodListingsTitle(): string {\r\n        return (this.isClaimedCart() ? 'Claimed Food'\r\n                                     : 'Donated Food');\r\n    }\r\n\r\n\r\n    private isClaimedCart(): boolean {\r\n        return (this.foodListingsFiltersComponent.getFilterValues().listingsStatus === LISTINGS_STATUS.myClaimedListings);\r\n    }\r\n\r\n\r\n    private isDonatedCart(): boolean {\r\n        return (this.foodListingsFiltersComponent.getFilterValues().listingsStatus === LISTINGS_STATUS.myDonatedListings);\r\n    }\r\n\r\n\r\n    private unclaimSelectedFoodListing(): void {\r\n        if (confirm('Are you sure you want to unclaim the food?\\nThis cannot be undone.')) {\r\n            let selectedFoodListing: FoodListing = this.foodListingsComponent.getSelectedFoodListing();\r\n            let observer: Observable<void> = this.claimFoodListingService.unclaimFoodListing(selectedFoodListing.foodListingKey);\r\n\r\n            observer.subscribe(\r\n                () => {\r\n                    this.foodListingsComponent.removeSelectedFoodListing();\r\n                },\r\n                (err: Error) => {\r\n                    console.log(err);\r\n                }\r\n            );\r\n        }\r\n    }\r\n\r\n\r\n    private removeSelectedFoodListing(): void {\r\n        let selectedFoodListing: FoodListing = this.foodListingsComponent.getSelectedFoodListing();\r\n        let observer: Observable<void> = this.addRemoveFoodListingService.removeFoodListing(selectedFoodListing.foodListingKey);\r\n\r\n        observer.subscribe(\r\n            () => {\r\n                this.foodListingsComponent.removeSelectedFoodListing();\r\n            },\r\n            (err: Error) => {\r\n                console.log(err);\r\n            }\r\n        );\r\n    }\r\n\r\n\r\n    // Changes status of listings in a use cart through left panel buttons or modal buttons\r\n    private mutateListingStatus(singleListingFlag: boolean, upgradeListingFlag: boolean): void {\r\n        let selectedFoodListings: FoodListing[];\r\n        if (singleListingFlag) {\r\n            // For changing the status of only one listing (via modal button)\r\n            selectedFoodListings = [this.foodListingsComponent.getSelectedFoodListing()];\r\n        }\r\n        else {\r\n            // For changing the status of all cart listings (via left panel button)\r\n            selectedFoodListings = this.foodListingsComponent.getDisplayedListings();\r\n        }\r\n        if (upgradeListingFlag) {\r\n            // Send chosen food listings to backend for status upgrade\r\n        }\r\n        else {\r\n            // Send chosen food listings to backend for status downgrade\r\n        }\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// C:/Users/User Name/ConnectFood/client/src/app/cart/cart.component.ts","import { Pipe, PipeTransform } from '@angular/core';\nimport { DateFormatter } from '../../../../shared/common-util/date-formatter';\n\n\n@Pipe({\n    name: 'dateFormatter'\n})\nexport class DateFormatterPipe implements PipeTransform {\n\n    public transform(value: Date, args?: any): string {\n        return DateFormatter.dateToMonthDayYearString(value);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// C:/Users/User Name/ConnectFood/client/src/app/common-util/date-formatter.pipe.ts","import { Subscription } from \"rxjs/Subscription\";\r\nimport { IBusyConfig } from 'angular2-busy';\r\n\r\n\r\n/**\r\n * Default configuration for a busy loading symbol when wating for responses.\r\n */\r\nexport class FoodWebBusyConfig implements IBusyConfig {\r\n\r\n    public busy: Subscription;\r\n\r\n    constructor(\r\n        public message: string = 'Please Wait',\r\n        public backdrop: boolean = true,\r\n        public delay: number = 100,\r\n        public minDuration: number = 0\r\n    ) {\r\n        this.busy = null;\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// C:/Users/User Name/ConnectFood/client/src/app/common-util/food-web-busy-config.ts","/* TODO: This file is a hell of a lot confusing... simplify in future. For now, just made lots of comments. */\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { Http, Headers, Response, RequestOptionsArgs } from '@angular/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { DialogService } from \"ng2-bootstrap-modal\";\r\n\r\nimport { SessionDataService } from \"../common-util/session-data.service\";\r\nimport { LoginComponent } from '../authentication/login/login.component'\r\n\r\nimport { FoodWebResponse } from \"../../../../shared/message-protocol/food-web-response\";\r\nimport { Observer } from \"rxjs/Observer\";\r\n\r\nexport { Response };\r\n\r\n\r\n/**\r\n * All requests made to the server should be processed through this service. There should be no raw http requests.\r\n * This service acts as client side middleware that checks the error state of the response to see if it can remedy the error\r\n * (like in cases where a login is required) and resend the request.\r\n */\r\n@Injectable()\r\nexport class RequestService {\r\n\r\n    constructor(\r\n        private http: Http,\r\n        private dialogService: DialogService,\r\n        private sessionDataService: SessionDataService\r\n    ) { }\r\n\r\n\r\n    /**\r\n     * Performs an HTTP POST Request. The result will be examined to determine if the user needs to re-login.\r\n     * If so, then it will automatically trigger the Login Component (popup) to display. If the login is successful,\r\n     * then it will resend the request. If not, then it will fail with appropriate error flag and message.\r\n     * @param url The destination URL for the request. Can be a relative URL.\r\n     * @param body The body or payload of the request. This will be sent in JSON format.\r\n     */\r\n    public post(url: string, body: any): Observable<Response> {\r\n        /* Wrap the request in a function so that it can recursively be called by response handler if necessary.\r\n           Such cases would include when the user must login and they successfully login (repeat request). */\r\n        let sendRequest = function(): Observable<Response> {\r\n            let options: RequestOptionsArgs = {\r\n                headers: new Headers({\r\n                    'Content-Type': 'application/json'\r\n                })\r\n            };\r\n\r\n            return Observable.create((observer: Observer<Response>) => {\r\n                this.http.post(url, body, options).subscribe((response: Response) => {\r\n\r\n                    // Make the response handler its own Observable because it can evaluate to a recursive call to sendRequest()!\r\n                    this.handleResponse(sendRequest, response).subscribe((response: Response) => {\r\n                        observer.next(response);\r\n                        observer.complete();\r\n                    });\r\n                });\r\n            });\r\n        }\r\n        .bind(this);\r\n\r\n        return sendRequest();\r\n    }\r\n\r\n\r\n    /**\r\n     * Performs an HTTP GET Request. The result will be examined to determine if the user needs to re-login.\r\n     * If so, then it will automatically trigger the Login Component (popup) to display. If the login is successful,\r\n     * then it will resend the request. If not, then it will fail with appropriate error flag and message.\r\n     * @param url The destination URL for the request. Can be a relative URL.\r\n     */\r\n    public get(url: string): Observable<Response> {\r\n        /* Wrap the request in a function so that it can recursively be called by response handler if necessary.\r\n           Such cases would include when the user must login and they successfully login (repeat request). */\r\n        let sendRequest = function(): Observable<Response> {\r\n\r\n            return Observable.create((observer: Observer<Response>) => {\r\n                this.http.get(url).subscribe((response: Response) => {\r\n                    \r\n                    // Make the response handler its own Observable because it can evaluate to a recursive call to sendRequest()!\r\n                    this.handleResponse(sendRequest, response).subscribe((response: Response) => {\r\n                        observer.next(response);\r\n                        observer.complete();\r\n                    });\r\n                });\r\n            });\r\n        }\r\n        .bind(this);\r\n\r\n        return sendRequest();\r\n    }\r\n\r\n\r\n    /**\r\n     * Handles the response of either an HTTP POST or GET request. Determines if re-login is required and acts accordingly.\r\n     * @param retrySendRequestCallback A callback function that may be called to recursively retry the request.\r\n     * @param response The response of either an HTTP POST or GET request.\r\n     */\r\n    private handleResponse(retrySendRequestCallback: () => Observable<Response>, response: Response): Observable<Response> {\r\n        let foodWebResponse: FoodWebResponse = response.json();\r\n\r\n        // Check if the user must confirm their signup in order to successfully perform the related request/action.\r\n        if (foodWebResponse.signupConfirmRequired) {\r\n            alert('Sorry, you must confirm your registration by following the email confirmation link sent to your email account before performing this action.');\r\n        }\r\n        // Check if the user must login in order to successfully perform the related request/action.\r\n        else if (foodWebResponse.loginRequired) {\r\n            // Mark the session ended (or not logged in) in this client.\r\n            this.sessionDataService.clearSessionData();\r\n\r\n            // Wrap login result in a newly created Observable.\r\n            return Observable.create((observer: Observer<Response>) => {\r\n\r\n                // Attempt login.\r\n                LoginComponent.display(this.dialogService).subscribe(() => {\r\n\r\n                    // If login successful, then re-send original request and go through this process recursively.\r\n                    if (this.sessionDataService.sessionDataAvailable()) {\r\n                        retrySendRequestCallback().subscribe((response: Response) => {\r\n                            observer.next(response);\r\n                            observer.complete();\r\n                        });\r\n                    }\r\n                    // Else login not successful so simply return original response with error information.\r\n                    else {\r\n                        observer.next(response);\r\n                        observer.complete();\r\n                    }\r\n                });\r\n            })\r\n        }\r\n\r\n        // No problems with signup confirmation or login detected!\r\n        return Observable.of(response);\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// C:/Users/User Name/ConnectFood/client/src/app/common-util/request.service.ts","import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router } from '@angular/router';\nimport { Observable } from 'rxjs/Observable';\nimport { DialogService } from \"ng2-bootstrap-modal\";\n\nimport { RequestService, Response } from './request.service';\nimport { SessionDataService } from './session-data.service';\nimport { LoginComponent } from '../authentication/login/login.component'\n\nimport { LoginResponse } from './../../../../shared/authentication/login-message';\n\n\n/**\n * Contains route preprocessing logic. Re-authenticates the user whenever there is a route change.\n * Also, makes a user login if they visit restricted routes which require login.\n */\n@Injectable()\nexport class RoutePreprocessService implements CanActivate {\n\n\n    /**\n     * List of login restricted routes. User must be logged in to visit these pages!\n     */\n    private static readonly LOGIN_RESTRICTED_ROUTES: string[] = ['/donate', '/appUserInfo', '/cart'];\n\n\n    constructor(\n        private requestService: RequestService,\n        private router: Router,\n        private dialogService: DialogService,\n        private authSessionService: SessionDataService\n    ) { }\n\n\n    /**\n     * Determines if a given target route can be activated (or followed). Will check credentials on server regardless of whether or not\n     * the given route is in the LOGIN_RESTRICTED_ROUTES list.\n     * @param route The route that is being activated.\n     * @param state The state of the router.\n     * @return An observable that will resolve to true if the route can be activated, and false if it cannot.\n     */\n    public canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> {\n\n        // Check with server to check if we are logged in!\n        let observer: Observable<Response> = this.requestService.get('/authentication/reAuthenticate')\n\n        // Finally, check the response from the server and react appropriately.\n        return observer.map((response: Response): boolean => {\n\n            let reAuthenticateResponse: LoginResponse = response.json();\n            console.log(reAuthenticateResponse.message);\n\n            // Make sure we update the session info we are holding.\n            this.authSessionService.updateAppUserSessionData(reAuthenticateResponse.appUserInfo);\n\n            // If not authenticated, and we are visiting a route that requires us to be logged in, then redirect to login.\n            if (!reAuthenticateResponse.success && RoutePreprocessService.LOGIN_RESTRICTED_ROUTES.indexOf(state.url) >= 0) {\n                this.attemptLoginAndRedirect(state.url);\n                return false;\n            }\n\n            return true;\n        });\n    }\n\n\n    /**\n     * Generates a login dialog that the user can login with. If login is successful, then the user is redirected to their original target route.\n     * @param toUrl THe url that the user was trying to access before reAuthentication.\n     */\n    private attemptLoginAndRedirect(toUrl: string): void {\n\n        // Generate the login dialog.\n        let dialogObserver: Observable<boolean> = LoginComponent.display(this.dialogService);\n\n        // Observe what the dialog result is.\n        dialogObserver.subscribe(() => {\n            \n            // After done with login dialog, if we are logged in, then we can redirect to original intended link!\n            if (this.authSessionService.sessionDataAvailable()) {\n                this.router.navigate([toUrl]);\n            }\n        });\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// C:/Users/User Name/ConnectFood/client/src/app/common-util/route-preprocess.service.ts","import { Injectable } from '@angular/core';\r\n\r\nimport { AppUserInfo } from \"./../../../../shared/authentication/app-user-info\";\r\n\r\n\r\n@Injectable()\r\nexport class SessionDataService {\r\n\r\n    /**\r\n     * Raw client session data. The App User Info belonging to the current signed in user.\r\n     */\r\n    private static appUserInfo: AppUserInfo = null;\r\n\r\n    constructor() { }\r\n\r\n\r\n    /**\r\n     * Updates the client's session data based off of given App User info.\r\n     * @param appUserInfo The App User info to update the client session data with.\r\n     */\r\n    public updateAppUserSessionData(appUserInfo: AppUserInfo): void {\r\n        SessionDataService.appUserInfo = appUserInfo;\r\n    }\r\n\r\n\r\n    /**\r\n     * Fills and returns an AppUserInfo container with available client session data.\r\n     * @return The filled AppUserInfo container.\r\n     */\r\n    public getAppUserSessionData(): AppUserInfo {\r\n        return SessionDataService.appUserInfo;\r\n    }\r\n\r\n\r\n    /**\r\n     * convenience method for retrieving the full name of a logged in organization or individual user.\r\n     */\r\n    public getFullName(): string {\r\n        if (SessionDataService.appUserInfo != null) {\r\n            if (SessionDataService.appUserInfo.organizationName != null) {\r\n                return SessionDataService.appUserInfo.organizationName;\r\n            }\r\n            return (SessionDataService.appUserInfo.firstName + ' ' + SessionDataService.appUserInfo.lastName);\r\n        }\r\n        return null;\r\n    }\r\n\r\n\r\n    /**\r\n     * Clears the current session data.\r\n     */\r\n    public clearSessionData(): void {\r\n        SessionDataService.appUserInfo = null;\r\n    }\r\n\r\n\r\n    /**\r\n     * Determines if any session data is currently available or being held.\r\n     * @return true if session data is available, false if not (it is clear).\r\n     */\r\n    public sessionDataAvailable(): boolean {\r\n        return (SessionDataService.appUserInfo != null);\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// C:/Users/User Name/ConnectFood/client/src/app/common-util/session-data.service.ts","exports = module.exports = require(\"../../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \"label:not(.perishable-label) {\\r\\n    font-weight: bold;\\r\\n    font-size: 25px;\\r\\n}\\r\\n\\r\\ninput[type=checkbox]\\r\\n{\\r\\n  /* Double-sized Checkboxes */\\r\\n  transform: scale(2);\\r\\n  -ms-transform: scale(2); /* IE */\\r\\n  -moz-transform: scale(2); /* FF */\\r\\n  -webkit-transform: scale(2); /* Safari and Chrome */\\r\\n  -o-transform: scale(2); /* Opera */\\r\\n  padding: 10px;\\r\\n  margin-left: 10px;\\r\\n}\\r\\n\\r\\n#perishable-yes {\\r\\n    margin-right: 20px;\\r\\n}\\r\\n\\r\\nmd-form-field, md-input-container {\\r\\n    width: 100%;\\r\\n}\\r\\n\\r\\n.inline-error, md-form-field, md-input-container {\\r\\n    font-size: 20px;\\r\\n}\\r\\n\\r\\n:host ::ng-deep .mat-form-field-infix {\\r\\n    border: none;\\r\\n}\\r\\n\\r\\n.inline-error {\\r\\n    line-height: 20px;\\r\\n    vertical-align: top;\\r\\n}\\r\\n\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/User Name/ConnectFood/client/src/app/donate/donate.component.css\n// module id = ../../../../../client/src/app/donate/donate.component.css\n// module chunks = main","module.exports = \"<div class=\\\"container\\\">\\n    <h1 class=\\\"primary-background\\\">Donor Form</h1>\\n    <hr>\\n\\n    <div [hidden]=\\\"submitted\\\" class=\\\"row\\\">\\n        <div class=\\\"col-md-5\\\">\\n            <label>Upload Image</label>\\n            <img-cropper [image]=\\\"this\\\" [settings]=\\\"cropperSettings\\\"></img-cropper>\\n        </div>\\n\\n        <div class=\\\"col-md-7\\\">\\n            <form [formGroup]=\\\"foodForm\\\" (ngSubmit)=\\\"onSubmit(foodForm, $event)\\\">\\n\\n                <div class=\\\"form-group\\\">\\n                    <label>Food Types</label>\\n                    <app-food-types [initiallyChecked]=\\\"false\\\" [numColumns]=\\\"2\\\" [required]=\\\"true\\\" [extraValidation]=\\\"forceValidation\\\" #FoodTypesComponent></app-food-types>\\n                    <!--<div class=\\\"alert alert-danger\\\" [hidden]=\\\"!shouldFireRequireValidation(foodForm.controls.foodType)\\\">At least one Food Type is required</div>-->\\n                </div>\\n\\n                <div class=\\\"form-group\\\">\\n                    <label>Perishable</label><br>\\n                    <md-radio-group [ngClass]=\\\"{'warn-foreground': isInvalid(perishable)}\\\" formControlName=\\\"perishable\\\" required>\\n                        <label for=\\\"perishable-yes-check\\\" id=\\\"perishable-yes\\\" class=\\\"perishable-label no-select\\\">\\n                            <md-radio-button name=\\\"perishable\\\" id=\\\"perishable-yes-check\\\" [value]=\\\"true\\\">Yes</md-radio-button>\\n                        </label>\\n                        <label for=\\\"perishable-no-check\\\" class=\\\"perishable-label no-select\\\">\\n                            <md-radio-button name=\\\"perishable\\\" id=\\\"perishable-no-check\\\" [value]=\\\"false\\\">No</md-radio-button>\\n                        </label>\\n                        <!--<div class=\\\"warn-foreground inline-error\\\" [hidden]=\\\"!isInvalid(perishable)\\\">*</div>-->\\n                    </md-radio-group>\\n                </div>\\n\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"foodDescription\\\">Description</label>\\n                    <md-input-container class=\\\"input-group\\\" floatPlaceholder=\\\"never\\\">\\n                        <textarea mdInput mdTextareaAutosize id=\\\"foodDescription\\\" placeholder=\\\"Describe donation here\\\"\\n                            formControlName=\\\"foodDescription\\\" [errorStateMatcher]=\\\"isInvalid.bind(this)\\\" required></textarea>\\n                    </md-input-container>\\n                </div>\\n\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"expirationDate\\\">Expiration Date</label>\\n                    <md-input-container class=\\\"input-group\\\" floatPlaceholder=\\\"never\\\">\\n                        <input mdInput id=\\\"expirationDate\\\" [mdDatepicker]=\\\"picker\\\" placeholder=\\\"mm/dd/yyyy\\\"\\n                            formControlName=\\\"expirationDate\\\" [errorStateMatcher]=\\\"isInvalid.bind(this)\\\" required>\\n                        <md-datepicker-toggle mdSuffix [for]=\\\"picker\\\"></md-datepicker-toggle>\\n                        <md-datepicker touchUi=\\\"true\\\" #picker opened=\\\"true\\\"></md-datepicker>\\n                    </md-input-container>\\n                </div>\\n\\n                <button md-raised-button color=\\\"primary\\\" class=\\\"button-md\\\">Submit</button>\\n\\n            </form>\\n        </div>\\n    </div>\\n\\n\\n    <div *ngIf=\\\"submitted\\\">\\n        <h2>Thank-you for submitting the following:</h2>\\n\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col-md-2\\\">Food Type</div>\\n            <div class=\\\"col-md-10 pull-left\\\">{{ foodTypesComponent.getSelectedFoodTypes() }}</div>\\n        </div>\\n\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col-md-2\\\">Description</div>\\n            <div class=\\\"col-md-10 pull-left\\\">{{ foodForm.controls.foodDescription.value }}</div>\\n        </div>\\n\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col-md-2\\\">Perishabe</div>\\n            <div class=\\\"col-md-10 pull-left\\\">{{ (foodForm.controls.perishable.value === true) ? 'true' : 'false' }}</div>\\n        </div>\\n\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col-md-2\\\">Expiration Date</div>\\n            <div class=\\\"col-md-10 pull-left\\\">{{ foodForm.controls.expirationDate.value | dateFormatter }}</div>\\n        </div>\\n        <br>\\n\\n        <button md-raised-button color=\\\"primary\\\" class=\\\"button-md\\\" (click)=\\\"donateAgain()\\\">Donate Again</button>\\n        <button md-raised-button color=\\\"primary\\\" class=\\\"button-md\\\" >Edit Donation</button>\\n    </div>\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/User Name/ConnectFood/client/src/app/donate/donate.component.html\n// module id = ../../../../../client/src/app/donate/donate.component.html\n// module chunks = main","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators, AbstractControl } from '@angular/forms';\r\nimport { ImageCropperComponent, CropperSettings } from 'ng2-img-cropper';\r\n\r\nimport { AddRemoveFoodListingService } from \"../food-listings/add-remove-food-listing.service\";\r\nimport { DateFormatterPipe } from \"../common-util/date-formatter.pipe\"\r\n\r\nimport { FoodTypesComponent } from \"../food-listings/food-types/food-types.component\";\r\n\r\nimport { FoodListingUpload } from \"../../../../shared/food-listings/food-listing-upload\";\r\nimport { NgbTooltip } from \"@ng-bootstrap/ng-bootstrap\";\r\n\r\n\r\n@Component({\r\n    moduleId: module.id,\r\n    selector: 'app-donate',\r\n    templateUrl: 'donate.component.html',\r\n    providers: [AddRemoveFoodListingService],\r\n    styleUrls: ['donate.component.css']\r\n})\r\nexport class DonateComponent implements OnInit {\r\n    \r\n    private foodForm: FormGroup;\r\n    private forceValidation: boolean;\r\n    private submitted: boolean;\r\n    private dispUrl: string;\r\n\r\n    private image: string;\r\n    private cropperSettings: CropperSettings;\r\n\r\n    @ViewChild('FoodTypesComponent') private foodTypesComponent: FoodTypesComponent;\r\n\r\n\r\n    constructor(\r\n        private formBuilder: FormBuilder,\r\n        private addRemoveFoodListingService: AddRemoveFoodListingService,\r\n        private dateFormatter: DateFormatterPipe\r\n    ) {\r\n        // Want to force validators to process on submit. Non-text fields will only validate on submit too!\r\n        this.forceValidation = false;\r\n        this.submitted = false;\r\n\r\n        this.cropperSettings = new CropperSettings();\r\n        this.cropperSettings.width = 100;\r\n        this.cropperSettings.height = 100;\r\n        this.cropperSettings.croppedWidth = 100;\r\n        this.cropperSettings.croppedHeight = 100;\r\n        this.cropperSettings.canvasWidth = 400;\r\n        this.cropperSettings.canvasHeight = 300;\r\n    }\r\n\r\n\r\n    ngOnInit() {\r\n        this.foodForm = this.formBuilder.group({\r\n            perishable: ['', Validators.required],\r\n            foodDescription: ['', Validators.required],\r\n            expirationDate: [null, Validators.required]\r\n        });\r\n    }\r\n\r\n\r\n    private isInvalid(validField: AbstractControl): boolean {\r\n        return validField.errors != null && (validField.touched || this.forceValidation);\r\n    }\r\n\r\n\r\n    private onSubmit({ value, valid }: { value: FoodListingUpload, valid: boolean }, event: Event) {\r\n        event.preventDefault();\r\n        this.forceValidation = true;\r\n\r\n        // Make sure we get all the selected Food Types.\r\n        value.foodTypes = this.foodTypesComponent.getSelectedFoodTypes();\r\n        valid = (valid && value.foodTypes.length !== 0);\r\n\r\n        if (valid) {\r\n            let observer = this.addRemoveFoodListingService.addFoodListing(value, this.image);\r\n            observer.subscribe(\r\n                (valueKey: number) => {\r\n                    // TODO: Add functionality for edit of added food listing using the returned key!\r\n                    this.submitted = true;\r\n                },\r\n                (err: Error) => {\r\n                    alert('An error has occured which caused your donation to fail.\\nPlease contact Food Web for assistnace.\\n\\nThank-you.');\r\n                    console.log(err);\r\n                }\r\n            );\r\n        }\r\n    }\r\n\r\n\r\n    private donateAgain(): void {\r\n        this.foodForm.reset();\r\n        this.foodForm.markAsPristine();\r\n        this.foodForm.markAsUntouched();\r\n        this.foodTypesComponent.reset();\r\n        this.forceValidation = false;\r\n        this.submitted = false;\r\n    }\r\n\r\n\r\n    get perishable(): AbstractControl {\r\n        return this.foodForm.controls.perishable;\r\n    }\r\n\r\n    get foodDescription(): AbstractControl {\r\n        return this.foodForm.controls.foodDescription;\r\n    }\r\n\r\n    get expirationDate(): AbstractControl {\r\n        return this.foodForm.controls.expirationDate;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// C:/Users/User Name/ConnectFood/client/src/app/donate/donate.component.ts","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs/Observable';\r\n\r\nimport { RequestService, Response } from \"../common-util/request.service\";\r\n\r\nimport { FoodListingUpload } from \"./../../../../shared/food-listings/food-listing-upload\";\r\nimport { AddFoodListingRequest, AddFoodListingResponse } from \"./../../../../shared/food-listings/add-food-listing-message\";\r\nimport { FoodWebResponse } from \"./../../../../shared/message-protocol/food-web-response\";\r\nimport { ClaimFoodListingRequest } from \"./../../../../shared/food-listings/claim-food-listing-message\";\r\n\r\n\r\n@Injectable()\r\nexport class AddRemoveFoodListingService {\r\n\r\n\r\n    constructor(\r\n        private requestService: RequestService\r\n    ) { }\r\n\r\n\r\n    /**\r\n     * Adds a food listing on the server.\r\n     * @param foodListing The food listing to be added.\r\n     * @param imageUpload The image component of the food listing that is to be added.\r\n     * @return An observable that on success will provide the added food listings key (unique ID).\r\n     */\r\n    public addFoodListing(foodListingUpload: FoodListingUpload, imageUpload: string): Observable<number> {\r\n        foodListingUpload.imageUpload = imageUpload;\r\n\r\n        let body: AddFoodListingRequest = new AddFoodListingRequest(foodListingUpload);\r\n        let observer: Observable<Response> = this.requestService.post('/foodListings/addFoodListing', body);\r\n\r\n        return observer.map((response: Response) => {\r\n            let addFoodListingResponse: AddFoodListingResponse = response.json();\r\n            console.log(addFoodListingResponse.message);\r\n\r\n            if (addFoodListingResponse.success) {\r\n                return addFoodListingResponse.foodListingKey;\r\n            }\r\n            throw new Error(addFoodListingResponse.message);\r\n        });\r\n    }\r\n\r\n\r\n    /**\r\n     * Permanently removes a food listing from the server. Also triggers the removal of all claims on the food listing as well.\r\n     * @param foodListingKey The key identifier of the food listing that is to be removed.\r\n     */\r\n    public removeFoodListing(foodListingKey: number): Observable<void> {\r\n        let body: ClaimFoodListingRequest = new ClaimFoodListingRequest(foodListingKey);\r\n        let observer: Observable<Response> = this.requestService.post('/foodListings/removeFoodListing', body);\r\n        \r\n        return observer.map((response: Response) => {\r\n            let removeFoodListingResponse: FoodWebResponse = response.json();\r\n            console.log(removeFoodListingResponse.message);\r\n\r\n            if (!removeFoodListingResponse.success) {\r\n                throw new Error(removeFoodListingResponse.message);\r\n            }\r\n        });\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// C:/Users/User Name/ConnectFood/client/src/app/food-listings/add-remove-food-listing.service.ts","\"use strict\";\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs/Observable';\r\n\r\nimport { RequestService, Response } from \"../common-util/request.service\";\r\n\r\nimport { ClaimFoodListingRequest } from \"./../../../../shared/food-listings/claim-food-listing-message\";\r\nimport { FoodWebResponse } from \"./../../../../shared/message-protocol/food-web-response\";\r\n\r\n\r\n@Injectable()\r\nexport class ClaimFoodListingService {\r\n    \r\n    constructor(\r\n        private requestService: RequestService\r\n    ) { }\r\n\r\n\r\n    /**\r\n     * Claims a given Food Listing.\r\n     * @param foodListingKey The key (identifier) for the Food Listing that is to be claimed.\r\n     * @return An observable that has no payload (simply resolves on success).\r\n     */\r\n    public claimFoodListing(foodListingKey: number): Observable<void> {\r\n        return this.claimOrUnclaimFoodListing(foodListingKey, true);\r\n    }\r\n\r\n\r\n    /**\r\n     * Unclaims a given Food Listing.\r\n     * @param foodListingKey The key (identifier) for the Food Listing that is to be unclaimed.\r\n     * @return An observable that has no payload (simply resolves on success).\r\n     */\r\n    public unclaimFoodListing(foodListingKey: number): Observable<void> {\r\n        return this.claimOrUnclaimFoodListing(foodListingKey, false);\r\n    }\r\n\r\n\r\n    /**\r\n     * Uniform function for sending both claim and unclaim food listing messages to server.\r\n     * @param foodListingKey The key identifier of the food listing that is to be claimed or unclaimed.\r\n     * @param isClaim Set to true if this is a claim, set to false if it is an unclaim.\r\n     * @return An observable that has no payload (simply resolves on success).\r\n     */\r\n    private claimOrUnclaimFoodListing(foodListingKey: number, isClaim: boolean): Observable<void> {\r\n\r\n        let body: ClaimFoodListingRequest = new ClaimFoodListingRequest(foodListingKey);\r\n        let observer: Observable<Response> = this.requestService.post('/foodListings/' + (isClaim ? '' : 'un') + 'claimFoodListing', body);\r\n\r\n        // Listen for a response now.\r\n        return observer.map((response: Response) => {\r\n\r\n            let claimFoodListingResponse: FoodWebResponse = response.json();\r\n            \r\n            // On failure.\r\n            if (!claimFoodListingResponse.success) {\r\n                console.log(claimFoodListingResponse.message);\r\n                throw new Error(claimFoodListingResponse.message);\r\n            }\r\n        });\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// C:/Users/User Name/ConnectFood/client/src/app/food-listings/claim-unclaim-food-listing.service.ts","exports = module.exports = require(\"../../../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \"md-input-container, input {\\r\\n    cursor: pointer;\\r\\n    cursor: hand;\\r\\n}\\r\\n\\r\\n:host ::ng-deep .mat-form-field-infix {\\r\\n    border: none;\\r\\n}\\r\\n\\r\\nmd-input-container, input, md-datepicker-toggle {\\r\\n    font-size: 20px;\\r\\n}\\r\\n\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/User Name/ConnectFood/client/src/app/food-listings/food-listings-filters/food-listings-filters.component.css\n// module id = ../../../../../client/src/app/food-listings/food-listings-filters/food-listings-filters.component.css\n// module chunks = main","module.exports = \"<app-slick-left-panel [buttonTitle]=\\\"header\\\">\\n    \\n    <h2>{{header}}</h2>\\n    <hr>\\n    <div [formGroup]=\\\"filtersForm\\\">\\n\\n        <!-- Any additional filters will be transclused here -->\\n        <ng-content select=\\\"[top]\\\"></ng-content>\\n\\n        <h4>Food Types:</h4>\\n        <app-food-types #FoodTypesComponent></app-food-types>\\n        <br>\\n\\n        <h4>Expiration Date:</h4>\\n        <md-input-container floatPlaceholder=\\\"never\\\" (click)=\\\"picker.open()\\\">\\n            <input mdInput [mdDatepicker]=\\\"picker\\\" placeholder=\\\"mm/dd/yyyy\\\" formControlName=\\\"earliestExpireDate\\\" readonly=\\\"true\\\">\\n            <md-datepicker-toggle mdSuffix [for]=\\\"picker\\\"></md-datepicker-toggle>\\n            <md-datepicker touchUi=\\\"true\\\" #picker></md-datepicker>\\n        </md-input-container>\\n        <br>\\n\\n        <h4>Perishability:</h4>\\n        <div>\\n            <label class=\\\"checkbox-compress\\\">\\n                <md-checkbox formControlName=\\\"perishable\\\">Perishable</md-checkbox>\\n            </label>\\n            <br>\\n            <label class=\\\"checkbox-compress\\\">\\n                <md-checkbox formControlName=\\\"notPerishable\\\">Not Perishable</md-checkbox>\\n            </label>\\n        </div>\\n\\n        <!-- Any additional filters will be transclused here -->\\n        <ng-content select=\\\"[botton]\\\"></ng-content>\\n\\n    </div>\\n    <hr>\\n\\n</app-slick-left-panel>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/User Name/ConnectFood/client/src/app/food-listings/food-listings-filters/food-listings-filters.component.html\n// module id = ../../../../../client/src/app/food-listings/food-listings-filters/food-listings-filters.component.html\n// module chunks = main","import { Component, OnInit, Input, Output, ViewChild } from '@angular/core';\nimport { FormBuilder, FormGroup, AbstractControl, FormControl } from '@angular/forms';\n\nimport { FoodListingsFilters } from \"../../../../../shared/food-listings/food-listings-filters\";\nimport { FoodTypesComponent } from \"../food-types/food-types.component\";\n\n\n@Component({\n    selector: 'app-food-listings-filters',\n    templateUrl: './food-listings-filters.component.html',\n    styleUrls: ['./food-listings-filters.component.css']\n})\nexport class FoodListingsFiltersComponent implements OnInit {\n\n    private quantityVals: string[];\n    private tFrameVals: string[];\n    private distVals: string[];\n    private filtersForm: FormGroup;\n\n    @Input() private header: string = 'Filters';\n    @Input() private defaultLatestExpireNow: boolean = true;\n\n    @ViewChild('FoodTypesComponent') private foodTypesComponent: FoodTypesComponent;\n\n\n    constructor(private formBuilder: FormBuilder) {\n        // Must default initialize form so when referenced in parent, it is not null!\n        this.filtersForm = new FormGroup({});\n    }\n\n\n    ngOnInit() {\n        // Actual form group initialization requires Input to be evaluated, so must be in init!\n        this.addControl('earliestExpireDate', new FormControl(this.defaultLatestExpireNow ? new Date() : null));\n        this.addControl('perishable', new FormControl(true));\n        this.addControl('notPerishable', new FormControl(true));\n\n        this.quantityVals = [\"Car\", \"Van\", \"Truck\"];\n        this.tFrameVals = [\"0-6 Days\", \"6-12 Days\", \"12+ Days\"];\n        this.distVals = [\"0-6 Miles\", \"6-12 Miles\", \"12+ Miles\"];\n    }\n\n\n    /**\n     * Adds a form control to the underlying filters form model.\n     * @param name The name of the form control.\n     * @param control The logical representation of the form control.\n     */\n    public addControl(name: string, control: AbstractControl): void {\n        this.filtersForm.addControl(name, control);\n    }\n\n\n    /**\n     * Called whenever there is an update to the filters. Will provide the caller with updated filter values via a callback function.\n     * @param callback The callback function that will be given the updated filter values.\n     * @param excludeDisabled Optionally set to true if caller does not want to get filter values pertaining to filters that\n     *                        are not enabled or visible (due to a false *ngIf condition). Default is false (which means get these values).\n     */\n    public onFiltersUpdate(callback: (foodListingsFilters: FoodListingsFilters) => void, excludeDisabled: boolean = false): void {\n        // Liisten for changes in all values excluding Food Types.\n        this.filtersForm.valueChanges.subscribe((data: any) => {\n            callback(this.genFilterValues(excludeDisabled));\n        });\n\n        // Listen for changes in child Food Types component.\n        this.foodTypesComponent.onFoodTypesUpdate((foodTypes: string[]) => {\n            callback(this.genFilterValues(excludeDisabled, foodTypes));\n        });\n    }\n\n\n    /**\n     * Gets the current values of all filters.\n     * @param excludeDisabled Optionally set to true if caller does not want to get filter values pertaining to filters that\n     *                        are not enabled or visible (due to a false *ngIf condition). Default is false (which means get these values).\n     * @return The retrieved filter values.\n     */\n    public getFilterValues(excludeDisabled: boolean = false): FoodListingsFilters {\n        return this.genFilterValues(excludeDisabled);\n    }\n\n\n    /**\n     * Gets the filter values according to the current state of the form and its associated form group (view model).\n     * @param excludeDisabled Optionally set to true if caller does not want to get filter values pertaining to filters that\n     *                        are not enabled or visible (due to a false *ngIf condition). Default is false (which means get these values).\n     * @param foodTypes Optionally provide food types value that has already been obtained in the caller. Obtaining the food types value\n     *                  is a bit more expensive than normally obaining form values since a transformation happens with the contained form\n     *                  values. So, provide this value whenever possible.\n     * @return The Food Listings filter values.\n     */\n    private genFilterValues(excludeDisabled: boolean = false, foodTypes?: string[]): FoodListingsFilters {\n\n        let foodListingsFilters = (excludeDisabled ? this.filtersForm.value : this.filtersForm.getRawValue());\n        // See if we have been passed foodTypes or if we need to retrieve them from the Food Types component.\n        foodListingsFilters.foodTypes = (foodTypes == null) ? this.foodTypesComponent.getSelectedFoodTypes()\n                                                            : foodListingsFilters.foodTypes = foodTypes;\n        return foodListingsFilters;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// C:/Users/User Name/ConnectFood/client/src/app/food-listings/food-listings-filters/food-listings-filters.component.ts","exports = module.exports = require(\"../../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \".food-listing-img {\\r\\n    display: inline-block;\\r\\n    vertical-align: top;\\r\\n}\\r\\n\\r\\n.food-listing-contents, .food-listing-img {\\r\\n    display: inline-block;\\r\\n    margin-left: 1vw;\\r\\n}\\r\\n\\r\\n.link-content {\\r\\n    color: green;\\r\\n}\\r\\n\\r\\n.link-content:hover {\\r\\n    color: goldenrod;\\r\\n}\\r\\n\\r\\n.modal-img {\\r\\n    margin-right: 10px;\\r\\n    margin-bottom: 10px;\\r\\n}\\r\\n\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/User Name/ConnectFood/client/src/app/food-listings/food-listings.component.css\n// module id = ../../../../../client/src/app/food-listings/food-listings.component.css\n// module chunks = main","module.exports = \"<h2>{{header}}</h2>\\n<hr>\\n\\n<ng-container *ngFor=\\\"let foodListing of foodListings; let i = index\\\">\\n    <img *ngIf=\\\"foodListing.imgUrl != null\\\" [src]=\\\"foodListing.imgUrl\\\" class=\\\"food-listing-img\\\">\\n\\n    <div class=\\\"food-listing-contents\\\" style=\\\"text-align:left;\\\">\\n        <h5 class=\\\"link-content\\\">\\n            <a (click)=\\\"showDetails(detailsHTML, i)\\\" title=\\\"Click for Details\\\">{{foodListing.foodDescription}}</a>\\n        </h5>\\n\\n        <p>\\n            Donated By:\\n            <ng-container *ngIf=\\\"foodListing.donorOrganizationName != null\\\">\\n                    <b>{{foodListing.donorOrganizationName}}</b>\\n            </ng-container>\\n            <ng-container *ngIf=\\\"foodListing.donorOrganizationName == null\\\">\\n                    <b>{{foodListing.donorFirstName}} {{foodListing.donorLastName}}</b>\\n            </ng-container>\\n            <br>\\n            Present food types:\\n            <ng-container *ngFor=\\\"let foodType of foodListing.foodTypes; let i = index;\\\">\\n                <b>\\n                    {{foodType}}<ng-container *ngIf=\\\"i !== (foodListing.foodTypes.length - 1)\\\">,</ng-container>\\n                </b>\\n            </ng-container>\\n            <br>\\n            Expires: <b>{{foodListing.expirationDate}}</b> <!--Requires a {{foodListing.quantityClass}}-->\\n\\n            <ng-content select=\\\"[food-listing-info]\\\"></ng-content>\\n        </p>\\n    </div>\\n    <hr>\\n</ng-container>\\n\\n\\n<ng-template #detailsHTML let-c=\\\"close\\\" let-d=\\\"dismss\\\">\\n    <div class=\\\"modal-header\\\">\\n        <h4 class=\\\"modal-title\\\">Donation-{{foodListings[selectedFoodListingIndex].foodListingKey}}</h4>\\n        <button type=\\\"button\\\" class=\\\"close\\\" aria-label=\\\"Close\\\" (click)=\\\"c('Cross click')\\\">\\n            <span aria-hidden=\\\"true\\\">&times;</span>\\n        </button>\\n    </div>\\n\\n    <div class=\\\"modal-body\\\">\\n        <img *ngIf=\\\"foodListings[selectedFoodListingIndex].imgUrl != null\\\" [src]=\\\"foodListings[selectedFoodListingIndex].imgUrl\\\"\\n         id=\\\"details-img\\\" align=\\\"left\\\" class=\\\"img-thumbnail modal-img\\\">\\n        <p>{{foodListings[selectedFoodListingIndex].foodDescription}}</p>\\n        <ng-content select=\\\"[details-modal-body]\\\"></ng-content>\\n    </div>\\n    \\n    <div class=\\\"modal-footer\\\">\\n        <ng-content select=\\\"[details-modal-footer]\\\"></ng-content>\\n        <button md-raised-button color=\\\"primary\\\" class=\\\"button-md\\\" (click)=\\\"c('Close')\\\">Close</button>\\n    </div>\\n</ng-template>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/User Name/ConnectFood/client/src/app/food-listings/food-listings.component.html\n// module id = ../../../../../client/src/app/food-listings/food-listings.component.html\n// module chunks = main","import { Component, Input } from '@angular/core';\r\nimport { NgbModal, NgbModalRef } from \"@ng-bootstrap/ng-bootstrap\";\r\nimport { Observable } from \"rxjs/Observable\";\r\n\r\nimport { GetFoodListingsService } from \"./get-food-listings.service\";\r\n\r\nimport { FoodListing } from '../../../../shared/food-listings/food-listing';\r\nimport { FoodListingsFilters } from \"../../../../shared/food-listings/food-listings-filters\";\r\n\r\n\r\n@Component({\r\n    selector: 'app-food-listings',\r\n    templateUrl: './food-listings.component.html',\r\n    styleUrls: ['./food-listings.component.css'],\r\n    providers: [GetFoodListingsService]\r\n})\r\nexport class FoodListingsComponent {\r\n\r\n    @Input() private header: string = 'Food Listings';\r\n\r\n    private foodListings: Array<FoodListing>;\r\n    private selectedFoodListingIndex: number;\r\n    private modalFoodListingDetails: NgbModalRef;\r\n\r\n\r\n    constructor(\r\n        private modalService: NgbModal,\r\n        private getFoodListingsService: GetFoodListingsService\r\n    ) {\r\n        this.foodListings = new Array<FoodListing>();\r\n        this.selectedFoodListingIndex = null;\r\n        this.modalFoodListingDetails = null;\r\n    }\r\n\r\n\r\n    /**\r\n     * Refreshes the food listings using the new set of filters criteria. The offset used to retreive a certain range of food listings will be\r\n     * reset to 0.\r\n     * @param filters The filter criteria. \r\n     */\r\n    public refreshFoodListings(filters: FoodListingsFilters) {\r\n        let observer: Observable<FoodListing[]> = this.getFoodListingsService.getFoodListings(filters);\r\n\r\n        observer.subscribe((foodListings: FoodListing[]) => {\r\n            this.foodListings = foodListings as FoodListing[];\r\n        });\r\n    }\r\n\r\n\r\n    /**\r\n     * Displays a Food Listing details modal popup.\r\n     * @param detailsHTML The Food Listing detals modal HTML Element.\r\n     * @param selectedFoodListing The selected Food Listing.\r\n     */\r\n    private showDetails(detailsHTML: HTMLElement, selectedFoodListingIndex: number): void {\r\n        this.selectedFoodListingIndex = selectedFoodListingIndex;\r\n        this.modalFoodListingDetails = this.modalService.open(detailsHTML);\r\n        this.modalFoodListingDetails.result.then((result: string) => {\r\n            // Don't really need to listen for any signals from details modal popup since parent will be handling any non-close button presses!\r\n        });\r\n    }\r\n\r\n\r\n    /**\r\n     * Gets the selected Food Listing.\r\n     * @return The selected Food Listing.\r\n     */\r\n    public getSelectedFoodListing(): FoodListing {\r\n        if (this.selectedFoodListingIndex != null) {\r\n            return this.foodListings[this.selectedFoodListingIndex];\r\n        }\r\n        return null;\r\n    }\r\n\r\n\r\n    /**\r\n     * Removes the selected Food Listing.\r\n     */\r\n    public removeSelectedFoodListing(): void {\r\n        // Close any modal details popup related to the Food Listing we are deleting.\r\n        if (this.modalFoodListingDetails != null) {\r\n            this.modalFoodListingDetails.close();\r\n            this.modalFoodListingDetails = null;\r\n        }\r\n        \r\n        // Remove the Food Listing from the contained array model.\r\n        this.foodListings.splice(this.selectedFoodListingIndex, 1);\r\n        this.selectedFoodListingIndex = null;\r\n    }\r\n\r\n    // Gets the entire array of current Food Listings\r\n    public getDisplayedListings() {\r\n        return this.foodListings;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// C:/Users/User Name/ConnectFood/client/src/app/food-listings/food-listings.component.ts","exports = module.exports = require(\"../../../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \".column-6 {\\r\\n    display: inline-block;\\r\\n    min-width: 40%;\\r\\n    margin-right: 30px;\\r\\n    vertical-align: top;\\r\\n}\\r\\n\\r\\n.column-4 {\\r\\n    display: inline-block;\\r\\n    min-width: 30%;\\r\\n    margin-right: 30px;\\r\\n    vertical-align: top;\\r\\n}\\r\\n\\r\\n.column-3 {\\r\\n    display: inline-block;\\r\\n    min-width: 22%;\\r\\n    margin-right: 30px;\\r\\n    vertical-align: top;\\r\\n}\\r\\n\\r\\n.error-message {\\r\\n    font-size: 20px;\\r\\n}\\r\\n\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/User Name/ConnectFood/client/src/app/food-listings/food-types/food-types.component.css\n// module id = ../../../../../client/src/app/food-listings/food-types/food-types.component.css\n// module chunks = main","module.exports = \"<!-- This will be data driven by the Food Types stored on the server -->\\n<div [formGroup]=\\\"foodTypesForm\\\">\\n\\n    <!-- Loop through split columns (if split mode, then columns will numColumns - must generate array of numbers from 0 ... numColumns) -->\\n    <ng-container *ngFor=\\\"let column of createColumnsRange()\\\">\\n        <div [ngClass]=\\\"{\\n                            'column-6': (numColumns === 2),\\n                            'column-4': (numColumns === 3),\\n                            'column-3': (numColumns >= 4),\\n                            'warn-foreground': (required && numSelections() === 0 && extraValidation)\\n                        }\\\">\\n\\n            <!-- Loop through segments of Food Types based on numColumns -->\\n            <ng-container *ngFor=\\\"let foodTypeInd of createFoodTypesRange(column)\\\">\\n                <label class=\\\"checkbox-compress no-select\\\">\\n                    <md-checkbox [formControlName]=\\\"foodTypes[foodTypeInd]\\\">{{foodTypes[foodTypeInd]}}</md-checkbox>\\n                </label>\\n                <br>\\n            </ng-container>\\n\\n        </div>\\n    </ng-container>\\n\\n    <!-- <div *ngIf=\\\"required && numSelections() === 0 && extraValidation\\\" class=\\\"warn-foreground error-message\\\">\\n        * at least 1 required\\n    </div> -->\\n\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/User Name/ConnectFood/client/src/app/food-listings/food-types/food-types.component.html\n// module id = ../../../../../client/src/app/food-listings/food-types/food-types.component.html\n// module chunks = main","import { Component, OnInit, Input, Output } from '@angular/core';\nimport { FormBuilder, FormGroup, FormControl } from '@angular/forms';\n// import { ActivatedRoute } from \"@angular/router\";\n\nimport { FoodTypesService } from \"./food-types.service\";\n\n\n@Component({\n    selector: 'app-food-types',\n    templateUrl: './food-types.component.html',\n    styleUrls: ['./food-types.component.css']\n})\nexport class FoodTypesComponent implements OnInit {\n\n    private foodTypes: string[];\n    private foodTypesForm: FormGroup;\n    private foodTypesLoaded: boolean;\n\n    /**\n     * Determines if the Food Type checkboxes should initially be checked. Default is true.\n     */\n    @Input() private initiallyChecked: boolean = true;\n    /**\n     * The number of columns that the Food Types checkboxes will be displayed in. Default is 1, and make is 4.\n     */\n    @Input() private numColumns: number = 1;\n    /**\n     * Determines if at least one selection is required. Default is false.\n     */\n    @Input() private required: boolean = false;\n    /**\n     * Any extra required validation constraint. Ignored on default.\n     */\n    @Input() private extraValidation: boolean = true;\n\n    \n    constructor(// private routerSnapshot: ActivatedRoute,\n                private foodTypesService: FoodTypesService)\n    { \n        this.foodTypes = [];\n        this.foodTypesForm = new FormGroup({});\n        this.foodTypesLoaded = false;\n    }\n\n\n    ngOnInit() {\n        // this.foodTypes = this.routerSnapshot.data['value']['foodTypes'];\n\n        /* Ideally, this should resolve immediately because of a resolver used in route to parent component! The Food Types should have\n           already been fetched and cached from the server before this component was initialize and rendered, but just in case we will\n           call getFoodTypes instead of directly getting results form ActiveRoute. */\n        this.foodTypesService.getFoodTypes().subscribe((foodTypes: string[]) => {\n            this.foodTypes = foodTypes;\n\n            for (let i: number = 0; i < this.foodTypes.length; i++) {\n                this.foodTypesForm.addControl(this.foodTypes[i], new FormControl(this.initiallyChecked));\n            }\n\n            this.foodTypesLoaded = true;\n            this.foodTypesForm.updateValueAndValidity(); // When finished adding all food type controls, then trigger a value update so callback will\n                                                         // get the selected food types.\n        });\n    }\n    \n\n    /**\n     * Called whenever there is an update to the Food Types form controls. Will provide the caller with a (string) list of the selected Food Types.\n     * @param callback The callback function that will be given the selected Food Types.\n     */\n    public onFoodTypesUpdate(callback: (foodTypes: string[]) => void): void {\n        this.foodTypesForm.valueChanges.subscribe(data => {\n            /* Only signal callback that food types selection(s) have updated if they have been completely loaded. Otherwise, will fire every time\n               a food type control is added in ngOnInit(). */\n            if (this.foodTypesLoaded) {\n                callback(this.getSelectedFoodTypes());\n            }\n        });\n    }\n\n\n    /**\n     * Gets the currently selected Food Types.\n     * @return A list of the currently selected Food Types.\n     */\n    public getSelectedFoodTypes(): string[] {\n        return this.foodTypesService.getFoodTypesAssocWithTrue(this.foodTypesForm.value);\n    }\n\n\n    /**\n     * Resets the checkboxes to their initial checked value. Also resets any associated validation.\n     */\n    public reset(): void {\n        for (let i: number = 0; i < this.foodTypes.length; i++) {\n            this.foodTypesForm.controls[this.foodTypes[i]].setValue(this.initiallyChecked);\n        }\n        this.foodTypesForm.markAsPristine();\n        this.foodTypesForm.markAsUntouched();\n    }\n\n\n    /**\n     * Gets the number of selected Food Types.\n     * @return The number of selected Food Types.\n     */\n    private numSelections(): number {\n        return this.foodTypesService.getFoodTypesAssocWithTrue(this.foodTypesForm.value).length;\n    }\n\n\n    /**\n     * Creates an array/range containing incremental integers representing each column (for *ngFor column iterations).\n     * @return The array or range of column numbers.\n     */\n    private createColumnsRange(): number[] {\n        return Array.from(Array(this.numColumns).keys());\n    }\n\n\n    /**\n     * Creates an array/range containing incremental integers representing the Food Types array indexes of all Food Types that\n     * should be placed in a given column.\n     * @param column The column that the numeric range shall be generated for (columns are zero based!).\n     * @return The array or range of Food Type indexes that are to be rendered in the column.\n     */\n    private createFoodTypesRange(column: number) {\n        let range: number[] = [];\n\n        /* Calculate the number of extra Food Types that must be added to the first column if the total number of Food TYpes is not\n           evenly divisble by the number of columns! Also, all other ranges (column begins) must be offset by this amount! */\n        let remainder: number = (this.foodTypes.length % this.numColumns);\n\n        // Base range parameters off of number of columns specified by parent component and the number of Food Types from server.\n        let rangeLength: number = Math.floor(this.foodTypes.length / this.numColumns);\n        let rangeBegin: number = (column * rangeLength) + (column !== 0 ? remainder : 0);\n        let rangeEnd: number = (rangeBegin + rangeLength) + (column === 0 ? remainder : 0);\n\n        for (let i: number = rangeBegin; i < rangeEnd; i++) {\n            range.push(i);\n        }\n\n        return range;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// C:/Users/User Name/ConnectFood/client/src/app/food-listings/food-types/food-types.component.ts","import { Injectable } from '@angular/core';\nimport { Resolve, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router/router';\nimport { Observable, ObservableInput } from 'rxjs/Observable';\n\nimport { RequestService, Response } from \"../../common-util/request.service\";\n\nimport { GetFoodTypesResponse } from '../../../../../shared/food-listings/get-food-types-message';\n\n\n/**\n * A global service that is used to load Food Types before displaying certain components or pages.\n */\n@Injectable()\nexport class FoodTypesService implements Resolve<string[]> {\n\n    // We will cache any Food Types that come back from the server so we only need to contact server once!\n    private static foodTypesCache: string[] = null;\n\n    constructor(private requestService: RequestService) {}\n\n    /**\n     * Retrieves food types from the server if they have not previously been retrieved. Otherwise, fetches them from contained cache.\n     * @return An observable object that resolves to an array of food type strings.\n     */\n    public resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<string[]> {\n        return this.getFoodTypes();\n    }\n\n    /**\n     * Retrieves food types from the server if they have not previously been retrieved. Otherwise, fetches them from contained cache.\n     * @return An observable object that resolves to an array of food type strings.\n     */\n    public getFoodTypes(): Observable<string[]> {\n        // If we do not have cached Food Types, then we will contact the server.\n        if (FoodTypesService.foodTypesCache === null) {\n            let observer: Observable<Response> = this.requestService.get('/foodListings/getFoodTypes');\n\n            return observer.map((response: Response) => {\n                let getFoodTypesResponse: GetFoodTypesResponse = response.json();\n                console.log(getFoodTypesResponse.message);\n\n                if (getFoodTypesResponse.success) {\n                    FoodTypesService.foodTypesCache = getFoodTypesResponse.foodTypes;\n                    return getFoodTypesResponse.foodTypes;\n                }\n                \n                // On failure, simply goto catch callback below!\n                throw new Error(getFoodTypesResponse.message);\n            })\n            .catch((err: any, caught: Observable<string[]>) => {\n                console.log(err);\n                // Simply fill the Food Types with dummy data for now if cannot properly communicate with the server.\n                FoodTypesService.foodTypesCache = ['Food Type 1', 'Food Type 2', 'Food Type 3'];\n                return Observable.of(FoodTypesService.foodTypesCache);\n            });\n        }\n        // Else, we do have cached Food Types, and we have no need of contacting the server.\n        else {\n            return Observable.of(FoodTypesService.foodTypesCache);\n        }\n    }\n\n    /**\n     * Examines an object with Food Type keys and boolean values and extracts the Food Types that are associated with true.\n     * @param foodTypeBooleans An object that contains Food Type keys associated with boolean values.\n     */\n    public getFoodTypesAssocWithTrue(foodTypeBooleans: object): string[] {\n        let foodTypesAssocWithTrue: string[] = [];\n        let allFoodTypes: string[] = Object.keys(foodTypeBooleans);\n\n        // Iterate through all the food types and add those that are associated w/ true to the return list.\n        for (let i: number = 0; i < allFoodTypes.length; i++) {\n            if (foodTypeBooleans[allFoodTypes[i]] === true) {\n                foodTypesAssocWithTrue.push(allFoodTypes[i]);\n            }\n        }\n\n        return foodTypesAssocWithTrue;\n    }\n};\n\n\n\n// WEBPACK FOOTER //\n// C:/Users/User Name/ConnectFood/client/src/app/food-listings/food-types/food-types.service.ts","\"use strict\";\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\n\nimport { RequestService, Response } from \"../common-util/request.service\";\n\nimport { FoodListingsFilters, LISTINGS_STATUS } from \"./../../../../shared/food-listings/food-listings-filters\";\nimport { GetFoodListingsRequest, GetFoodListingsResponse } from \"./../../../../shared/food-listings/get-food-listings-message\";\nimport { FoodListing } from \"./../../../../shared/food-listings/food-listing\";\n\n\n/*const MODELS: FoodListing[] = [\n    {\n        name: \"Beef Stew\",\n        foodListingKey: 0,\n        donorOrganizationName: \"Stew's Stews\",\n        donorOrganizationAddress: \"800 Beef Lane\",\n        donorOrganizationCity: \"Williamsville\",\n        donorOrganizationState: \"New York\",\n        donorOrganizationZip: 14221,\n        donorLastName: \"Stew\",\n        donorFirstName: \"Steven\",\n        donorDistance: 6,\n        foodTypeDescription: \"Meat, Vegetable, Drink\",\n        foodDescription: \"Quite the beefy stew...\",\n        preishable: true,\n        expirationDate: \"13/32/2017\",\n        quantityClass: \"Car\",\n        imgUrl: \"https://i5.walmartimages.com/asr/4026d667-1824-48e3-acab-c46642521070_1.a0a61552b58949ce15a4990a2e02b050.jpeg?odnHeight=450&odnWidth=450&odnBg=FFFFFF\"\n    }\n]*/\n\n\n@Injectable()\nexport class GetFoodListingsService {\n    \n    private retrievalOffset: number;\n    private static readonly RETRIEVAL_AMOUNT: number = 20;\n\n    \n    constructor(\n        private requestService: RequestService\n    ) { \n        this.retrievalOffset = 0;\n    }\n\n\n    /**\n     * Retrieves food listings based off of filter criteria.\n     * @param filters The selected filter criteria used to limit the food listings that are retrieved on the server.\n     * @param getMoreListings Set to true if the server should get more listings to be diplayed, otherwise, it will get food listings to replace\n     *                        the current ones with (will start back at 0 retrieval offset).\n     * @return An observable object that resolves to an object that contains the array of FoodListing objects.\n     */\n    public getFoodListings(filters: FoodListingsFilters, getMoreListings: boolean = false): Observable<FoodListing[]> {\n\n        // If we are simply getting more food listings, then we will set the retrievalOffset to the beginning of next segment of entries.\n        (getMoreListings) ? this.retrievalOffset += GetFoodListingsService.RETRIEVAL_AMOUNT\n                          : this.retrievalOffset = 0;\n\n        // Set our retrieval range information for the server to filter by.\n        filters.retrievalOffset = this.retrievalOffset;\n        filters.retrievalAmount = GetFoodListingsService.RETRIEVAL_AMOUNT;\n\n        // Determine the route based off of the requested Food Listings' status (Are we getting food listings for receive or cart interface).\n        let route: string = (filters.listingsStatus == null || filters.listingsStatus === LISTINGS_STATUS.unclaimedListings)\n                            ? '/foodListings/getReceiverFoodListings'\n                            : '/foodListings/getCartFoodListings';\n        let body: GetFoodListingsRequest = new GetFoodListingsRequest(filters);\n        let observer: Observable<Response> = this.requestService.post(route, body);\n\n        // Listen for a response now.                                                 \n        return observer.map((response: Response) => {\n\n            let getFoodListingsResponse: GetFoodListingsResponse = response.json();\n            console.log(getFoodListingsResponse.message);\n\n            if (getFoodListingsResponse.success) {\n                return getFoodListingsResponse.foodListings;\n            }\n\n            // If the response success flag is false, then we will simply send back an empty array to the calling component.\n            return new Array<FoodListing>();\n        });\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// C:/Users/User Name/ConnectFood/client/src/app/food-listings/get-food-listings.service.ts","exports = module.exports = require(\"../../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \"footer {\\r\\n    width: 100%;\\r\\n    background-color: lightgray;\\r\\n}\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/User Name/ConnectFood/client/src/app/footer/footer.component.css\n// module id = ../../../../../client/src/app/footer/footer.component.css\n// module chunks = main","module.exports = \"<footer>\\r\\n    Copyright &copy; Food Web\\r\\n</footer>\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/User Name/ConnectFood/client/src/app/footer/footer.component.html\n// module id = ../../../../../client/src/app/footer/footer.component.html\n// module chunks = main","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-footer',\n  templateUrl: './footer.component.html',\n  styleUrls: ['./footer.component.css']\n})\nexport class FooterComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// C:/Users/User Name/ConnectFood/client/src/app/footer/footer.component.ts","exports = module.exports = require(\"../../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \".nav-link {\\r\\n    /* Make border same color as navigation bar background when not in hover state so size remains consistent */\\r\\n    border-right: 1px solid #292B2C;\\r\\n    border-left: 1px solid #292B2C;\\r\\n    font-size: 30px;\\r\\n    height: 100%;\\r\\n    min-height: 75px;\\r\\n    display: inline-block;\\r\\n    text-align: center;\\r\\n    outline: none;\\r\\n    transition: background 0.5s ease, color 0.5s ease;\\r\\n    -webkit-transition: background 0.5s ease, color 0.5s ease;\\r\\n    -moz-transition: background 0.5s ease, color 0.5s ease;\\r\\n    -ms-transition: background 0.5s ease, color 0.5s ease;\\r\\n    -o-transition: background 0.5s ease, color 0.5s ease;\\r\\n}\\r\\n\\r\\n.nav-link:hover {\\r\\n    background-color: #444444;\\r\\n    color: goldenrod !important;\\r\\n    cursor: pointer;\\r\\n    cursor: hand;\\r\\n    border-right: 1px solid #555555;\\r\\n    border-left: 1px solid #555555;\\r\\n}\\r\\n\\r\\n.nav-item {\\r\\n    margin: 0px 10px 0px 10px;\\r\\n    white-space: nowrap;\\r\\n}\\r\\n\\r\\n.navbar-toggler {\\r\\n    height: 70px;\\r\\n    font-size: 30px;\\r\\n    padding: 0px;\\r\\n    text-align: center;\\r\\n    outline: none;\\r\\n    transition: background 0.5s ease;\\r\\n    -webkit-transition: background 0.5s ease;\\r\\n    -moz-transition: background 0.5s ease;\\r\\n    -ms-transition: background 0.5s ease;\\r\\n    -o-transition: background 0.5s ease;\\r\\n}\\r\\n\\r\\n.navbar-toggler:hover {\\r\\n    background-color: #444444;\\r\\n    cursor: pointer;\\r\\n    cursor: hand;\\r\\n}\\r\\n\\r\\nheader {\\r\\n\\ttext-align: center;\\r\\n\\tfont-size: 30px;\\r\\n\\theight: 150px;\\r\\n\\tposition: absolute;\\r\\n\\tleft: 0px;\\r\\n\\ttop: 0px;\\r\\n\\twidth: 100%;\\r\\n\\tz-index: 100; /*Keep this on top!*/\\r\\n}\\r\\n\\r\\n#logo {\\r\\n\\theight: 150px;\\r\\n\\tposition: absolute;\\r\\n\\tleft: 0px;\\r\\n\\ttop: 0px;\\r\\n\\twidth: 262px;\\r\\n\\tpadding: 0;\\r\\n\\tmargin: 0;\\r\\n}\\r\\n\\r\\nnav {\\r\\n\\tmax-height: 75px;\\r\\n    margin-left: 262px;\\r\\n    padding: 0px 2px 0px 2px;\\r\\n}\\r\\n\\r\\n#vertSpacer {\\r\\n\\tposition: relative;\\r\\n\\tmargin-top: 150px; /* Everything must fall below the header on the page!*/\\r\\n}\\r\\n\\r\\n@media screen and (max-width: 767px) {\\r\\n\\tnav {\\r\\n\\t\\tmax-height: 100%;\\r\\n\\t\\tmin-height: 65px;\\r\\n\\t\\tmargin-left: 0px;\\r\\n\\t}\\r\\n\\r\\n\\theader {\\r\\n\\t\\theight: auto;\\r\\n\\t\\tposition: relative;\\r\\n\\t}\\r\\n\\r\\n\\t#logo {\\r\\n\\t\\tvisibility: hidden;\\r\\n\\t}\\r\\n\\r\\n\\t#vertSpacer {\\r\\n\\t\\tvisibility: hidden;\\r\\n\\t\\tposition: absolute;\\r\\n\\t}\\r\\n}\\r\\n\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/User Name/ConnectFood/client/src/app/header/header.component.css\n// module id = ../../../../../client/src/app/header/header.component.css\n// module chunks = main","module.exports = \"<header>\\r\\n    <img id=\\\"logo\\\" class=\\\"navbar-brand\\\" src=\\\"./assets/HeaderImg.jpg\\\" [routerLink]=\\\"['/home']\\\">\\r\\n\\r\\n    <nav class=\\\"navbar navbar-toggleable-sm navbar-inverse bg-inverse no-select\\\">\\r\\n        <button md-button class=\\\"navbar-toggler\\\" (click)=\\\"isExpanded = !isExpanded\\\" [attr.aria-expanded]=\\\"!isExpanded\\\" aria-controls=\\\"navbarContent\\\">\\r\\n            <span class=\\\"navbar-toggler-icon\\\"></span>\\r\\n        </button>\\r\\n\\r\\n        <div class=\\\"collapse navbar-collapse\\\" [ngbCollapse]=\\\"!isExpanded\\\">\\r\\n            <ul class=\\\"navbar-nav mr-auto\\\">\\r\\n                <button md-button class='nav-link' [routerLink]=\\\"['/home']\\\"><li class=\\\"nav-item\\\">Home</li></button>\\r\\n                <button md-button class='nav-link' [routerLink]=\\\"['/donate']\\\"><li class=\\\"nav-item\\\">Donate</li></button>\\r\\n                <button md-button class='nav-link' [routerLink]=\\\"['/receive']\\\"><li class=\\\"nav-item\\\">Receive</li></button>\\r\\n            </ul>\\r\\n\\r\\n            <ul class=\\\"navbar-nav navbar-right\\\">\\r\\n                <button md-button *ngIf=\\\"!sessionDataAvailable()\\\" class='nav-link' (click)=\\\"showLogin()\\\"><li class=\\\"nav-item\\\">Login</li></button>\\r\\n                <button md-button *ngIf=\\\"!sessionDataAvailable()\\\" class='nav-link' [routerLink]=\\\"['/signup']\\\"><li class=\\\"nav-item\\\">Signup</li></button>\\r\\n                <button md-button *ngIf=\\\"sessionDataAvailable()\\\" class='nav-link' [routerLink]=\\\"['/cart']\\\"><li class=\\\"nav-item\\\">Cart</li></button>\\r\\n                <button md-button *ngIf=\\\"sessionDataAvailable()\\\" class='nav-link' [routerLink]=\\\"['/appUserInfo']\\\"><li class=\\\"nav-item\\\">Account</li></button>\\r\\n                <button md-button *ngIf=\\\"sessionDataAvailable()\\\" class='nav-link' (click)=\\\"logout()\\\"><li class=\\\"nav-item\\\">Logout</li></button>\\r\\n            </ul>\\r\\n        </div>\\r\\n    </nav>\\r\\n</header>\\r\\n<div id=\\\"vertSpacer\\\"></div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/User Name/ConnectFood/client/src/app/header/header.component.html\n// module id = ../../../../../client/src/app/header/header.component.html\n// module chunks = main","import { Component } from '@angular/core';\r\nimport { DialogService } from \"ng2-bootstrap-modal\";\r\nimport { Observable } from \"rxjs/Observable\";\r\n\r\nimport { LoginComponent } from '../authentication/login/login.component';\r\nimport { SessionDataService } from '../common-util/session-data.service';\r\nimport { LogoutService } from '../authentication/misc/logout.service';\r\n\r\n\r\n@Component({\r\n    selector: 'app-header',\r\n    templateUrl: './header.component.html',\r\n    styleUrls: ['./header.component.css'],\r\n    providers: [LogoutService]\r\n})\r\nexport class HeaderComponent {\r\n\r\n    constructor(\r\n        private dialogService: DialogService,\r\n        private sessionDataService: SessionDataService,\r\n        private logoutService: LogoutService\r\n    ) { }\r\n\r\n\r\n    private showLogin(): void {\r\n        let dialogObserver: Observable<boolean> = LoginComponent.display(this.dialogService); \r\n        // Necessary so that observable action takes place!\r\n        dialogObserver.subscribe(() => {});\r\n    }\r\n\r\n\r\n    private logout(): void {\r\n        this.logoutService.logout();\r\n    }\r\n\r\n\r\n    private sessionDataAvailable(): boolean {\r\n        return this.sessionDataService.sessionDataAvailable();\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// C:/Users/User Name/ConnectFood/client/src/app/header/header.component.ts","exports = module.exports = require(\"../../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \"\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/User Name/ConnectFood/client/src/app/home/home.component.css\n// module id = ../../../../../client/src/app/home/home.component.css\n// module chunks = main","module.exports = \"<app-banner bannerSrc=\\\"../assets/BannerImg.jpg\\\" bannerHeight=\\\"680px\\\"></app-banner>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/User Name/ConnectFood/client/src/app/home/home.component.html\n// module id = ../../../../../client/src/app/home/home.component.html\n// module chunks = main","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})\nexport class HomeComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// C:/Users/User Name/ConnectFood/client/src/app/home/home.component.ts","exports = module.exports = require(\"../../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \"#details-img {\\r\\n    float: left;\\r\\n}\\r\\n\\r\\n/* When the screen gets small and the filters panel goes into mobile mode, then center the food listings */\\r\\n@media only screen and (max-width: 1200px) {\\r\\n    #food-listings {\\r\\n        float: none;\\r\\n        padding-left: 40px;\\r\\n        margin-left: auto;\\r\\n        margin-right: auto;\\r\\n    }\\r\\n}\\r\\n\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/User Name/ConnectFood/client/src/app/receive/receive.component.css\n// module id = ../../../../../client/src/app/receive/receive.component.css\n// module chunks = main","module.exports = \"<div class=\\\"container-fluid\\\">\\r\\n    <div id=\\\"receivers-row\\\" class=\\\"row\\\">\\r\\n        <div class=\\\"col-md-3\\\" id=\\\"filters\\\">\\r\\n            <app-food-listings-filters header=\\\"Search Filters\\\" [formGroup]=\\\"foodListingsFiltersComponent.filtersForm\\\" #foodListingsFilters>\\r\\n            </app-food-listings-filters>\\r\\n        </div>\\r\\n\\r\\n        <div id=\\\"food-listings\\\" class=\\\"col-md-9\\\">\\r\\n            <app-food-listings header=\\\"Available Food\\\" #foodListings>\\r\\n                <ng-container details-modal-footer>\\r\\n                    <button md-raised-button color=\\\"primary\\\" class=\\\"button-md\\\" (click)=\\\"claimSelectedFoodListing()\\\">Claim</button>\\r\\n                </ng-container>\\r\\n            </app-food-listings>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/User Name/ConnectFood/client/src/app/receive/receive.component.html\n// module id = ../../../../../client/src/app/receive/receive.component.html\n// module chunks = main","import { Component, ViewChild } from '@angular/core';\r\nimport { Observable } from \"rxjs/Observable\";\r\n\r\nimport { FoodListingsComponent } from \"../food-listings/food-listings.component\";\r\nimport { FoodListingsFiltersComponent } from \"../food-listings/food-listings-filters/food-listings-filters.component\";\r\nimport { ClaimFoodListingService } from \"../food-listings/claim-unclaim-food-listing.service\";\r\n\r\nimport { FoodListing } from \"../../../../shared/food-listings/food-listing\";\r\nimport { FoodListingsFilters } from \"../../../../shared/food-listings/food-listings-filters\";\r\n\r\n\r\n@Component({\r\n    selector: 'app-receive',\r\n    templateUrl: './receive.component.html',\r\n    styleUrls: ['./receive.component.css'],\r\n    providers: [ClaimFoodListingService]\r\n})\r\nexport class ReceiveComponent {\r\n    \r\n    @ViewChild('foodListingsFilters') private foodListingsFiltersComponent: FoodListingsFiltersComponent;\r\n    @ViewChild('foodListings') private foodListingsComponent: FoodListingsComponent;\r\n\r\n    constructor(\r\n        private claimFoodListingService: ClaimFoodListingService\r\n    ) { }\r\n\r\n    /**\r\n     * Executed after all of the view children have been initialized (so safest to interact with them now).\r\n     */\r\n    ngAfterViewInit() {\r\n        this.foodListingsComponent.refreshFoodListings(this.foodListingsFiltersComponent.getFilterValues());\r\n        this.foodListingsFiltersComponent.onFiltersUpdate(this.foodListingsComponent.refreshFoodListings.bind(this.foodListingsComponent));\r\n    }\r\n\r\n    /**\r\n     * Claims the currently selected Food Listing.\r\n     */\r\n    private claimSelectedFoodListing(): void {\r\n        let selectedFoodListing: FoodListing = this.foodListingsComponent.getSelectedFoodListing();\r\n        let observer: Observable<void> = this.claimFoodListingService.claimFoodListing(selectedFoodListing.foodListingKey);\r\n        \r\n        // Listen for result.\r\n        observer.subscribe(\r\n            () => {\r\n                // On success, simply remove the Food Listing from the Receiver Food Listings interface.\r\n                this.foodListingsComponent.removeSelectedFoodListing();\r\n            },\r\n            (err: Error) => {\r\n                console.log(err);\r\n            }\r\n        );\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// C:/Users/User Name/ConnectFood/client/src/app/receive/receive.component.ts","exports = module.exports = require(\"../../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \"#slick-left-panel {\\r\\n    position: absolute;\\r\\n    z-index: 100;\\r\\n    padding-left: 10px;\\r\\n    padding-right: 25px;\\r\\n    word-wrap: break-word;\\r\\n    width: calc(100vw - 20px);\\r\\n    max-width: 400px; /* This is (4 / 12) of 1200px so that we will never overlap anything to the right in non-mobile mode! */\\r\\n    background-color: inherit;\\r\\n}\\r\\n\\r\\n#slick-left-panel-button {\\r\\n    position: absolute;\\r\\n    height: 100%;\\r\\n    width: 25px;\\r\\n    right: -25px;\\r\\n    top:0;\\r\\n    background: darkgray;\\r\\n    cursor: pointer;\\r\\n    cursor: hand;\\r\\n    visibility: hidden;\\r\\n    transition: background 0.5s ease, right 0.5s linear;\\r\\n    -webkit-transition: background 0.5s ease, right 0.5s linear;\\r\\n    -moz-transition: background 0.5s ease, right 0.5s linear;\\r\\n    -ms-transition: background 0.5s ease, right 0.5s linear;\\r\\n    -o-transition: background 0.5s ease, right 0.5s linear;\\r\\n    z-index: 101;\\r\\n    opacity: 0.67;\\r\\n}\\r\\n\\r\\n#slick-left-panel-button:hover {\\r\\n    background: black;\\r\\n}\\r\\n\\r\\n@media only screen and (max-width: 1200px) {\\r\\n    #slick-left-panel {\\r\\n        right: 100%; /* The default state in mobile mode is to be off the screen to the left */\\r\\n        transition: -webkit-transform 0.5s linear;\\r\\n        transition: transform 0.5s linear;\\r\\n        transition: transform 0.5s linear, -webkit-transform 0.5s linear;\\r\\n        -webkit-transition: -webkit-transform 0.5s linear;\\r\\n        -moz-transition: -moz-transform 0.5s linear;\\r\\n        -ms-transition: -ms-transform 0.5s linear;\\r\\n        -o-transition: -o-transform 0.5s linear;\\r\\n        background: white;\\r\\n    }\\r\\n\\r\\n    .toggle-into-view {\\r\\n        transform: translateX(100%);\\r\\n        -webkit-transform: translateX(100%);\\r\\n        -moz-transform: translateX(100%);\\r\\n        -ms-transform: translateX(100%);\\r\\n        -o-transform: translateX(100%);\\r\\n    }\\r\\n\\r\\n    #slick-left-panel-button {\\r\\n        visibility: visible;\\r\\n    }\\r\\n}\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/User Name/ConnectFood/client/src/app/slick-left-panel/slick-left-panel.component.css\n// module id = ../../../../../client/src/app/slick-left-panel/slick-left-panel.component.css\n// module chunks = main","module.exports = \"<div id=\\\"slick-left-panel\\\" #slickLeftPanel>\\n\\n    <button type=\\\"button\\\" class=\\\"navbar-toggler arrow right\\\" id=\\\"slick-left-panel-button\\\" [title]=\\\"buttonTitle\\\"\\n     #slickLeftPanelButton (click)=\\\"togglePanelVisibility(slickLeftPanel, slickLeftPanelButton)\\\"></button>\\n\\n    <ng-content></ng-content>\\n    \\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/User Name/ConnectFood/client/src/app/slick-left-panel/slick-left-panel.component.html\n// module id = ../../../../../client/src/app/slick-left-panel/slick-left-panel.component.html\n// module chunks = main","import { Component, OnInit, Input } from '@angular/core';\n\n\n@Component({\n    selector: 'app-slick-left-panel',\n    templateUrl: './slick-left-panel.component.html',\n    styleUrls: ['./slick-left-panel.component.css']\n})\nexport class SlickLeftPanelComponent implements OnInit {\n\n    @Input() private buttonTitle: string = \"toggle\";\n\n\n    constructor() { }\n\n\n    ngOnInit() {\n        // We want to handle scroll events to determine when we should start fixing the slickLeftPanel at top of viewport!\n        //window.onscroll = this.monitorScrollForStickyTop.bind(this);\n    }\n\n    /**\n     * Called whenever the slickLeftPanelButton is pressed. Handles the toggling of the slickLeftPanel when in mobile mode.\n     * @param slickLeftPanel The slickLeftPanel (div) element which will be toggled in or out of the viewport.\n     * @param slickLeftPanelButton The slickLeftPanelButton (button) element which was pressed.\n     */\n    private togglePanelVisibility(slickLeftPanel: HTMLElement, slickLeftPanelButton: HTMLElement): void {\n        // If our slickLeftPanel div is outside the viewport, and we are translating it into the viewport\n        if (!this.isPanelToggledIntoView(slickLeftPanel)) {\n            this.toggleIntoView(slickLeftPanel, slickLeftPanelButton);\n        }\n        // Else if our slickLeftPanel div is inside the viewport, and we are translating it out of the viewport (getting rid of translation).\n        else {\n            this.toggleOutOfView(slickLeftPanel, slickLeftPanelButton);\n        }\n    }\n\n\n    /**\n     * Determines if the slick left panel is toggled into the viewport.\n     * @param slickLeftPanel The slick left panel (div) element.\n     */\n    private isPanelToggledIntoView(slickLeftPanel: HTMLElement): boolean {\n        // If it is in view, then there will be a translation value!\n        return slickLeftPanel.classList.contains('toggle-into-view');\n    }\n\n\n    /**\n     * Toggles the slickLeftPanel into the viewport.\n     * @param slickLeftPanel The slickLeftPanel (div) element which will be toggled into the viewport.\n     * @param slickLeftPanelButton The slickLeftPanelButton (button) element which was pressed.\n     */\n    private toggleIntoView(slickLeftPanel: HTMLElement, slickLeftPanelButton: HTMLElement): void {\n        // The toggle-into-view css class contains the translation.\n        slickLeftPanel.classList.add('toggle-into-view');\n        slickLeftPanelButton.style.right = '0px';\n    }\n\n\n    /**\n     * Toggles the slickLeftPanel out of the viewport.\n     * @param slickLeftPanel The slickLeftPanel (div) element which will be toggled out of the viewport.\n     * @param slickLeftPanelButton The slickLeftPanelButton (button) element which was pressed.\n     */\n    private toggleOutOfView(slickLeftPanel: HTMLElement, slickLeftPanelButton: HTMLElement): void {\n        slickLeftPanel.classList.remove('toggle-into-view');\n        slickLeftPanelButton.style.right = '-' + slickLeftPanelButton.offsetWidth + 'px';\n    }\n\n\n    /**\n     * Handles a scroll event to determine when to fix the slickLeftPanel div to the top of the viewport. We will fix it when\n     * we scroll to or past the top of the slickLeftPanel div. We will unfix it when we scroll above this position once more.\n     * @param event The scroll event.\n     */\n    /*private monitorScrollForStickyTop(event: Event): void {\n        let slickLeftPanel: HTMLElement = document.getElementById('slick-left-panel'); // This can potentially get out of sync with template if id changes!\n        let fixCutoff: number = this.getAbsolutePosTop(slickLeftPanel.parentElement);\n        let scrollPosition: number = (window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0);\n\n        if (scrollPosition >= fixCutoff) {\n            slickLeftPanel.style.position = 'fixed';\n            slickLeftPanel.style.top = '0px';\n        }\n        else {\n            slickLeftPanel.style.position = 'absolute';\n            slickLeftPanel.style.top = 'auto';\n        }\n    }*/\n\n\n    /**\n     * Calculates the absolute position of the top of a given HTML element.\n     * @param element The element to get the absolute position of.\n     */\n    /*private getAbsolutePosTop(element): number {\n        let top: number = 0;\n\n        do {\n            top += element.offsetTop || 0;\n            element = element.offsetParent;\n        } while (element);\n\n        return top;\n    }*/\n}\n\n\n\n// WEBPACK FOOTER //\n// C:/Users/User Name/ConnectFood/client/src/app/slick-left-panel/slick-left-panel.component.ts","// The file contents for the current environment will overwrite these during build.\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\n// The list of which env maps to which file can be found in `.angular-cli.json`.\n\nexport const environment = {\n  production: false\n};\n\n\n\n// WEBPACK FOOTER //\n// C:/Users/User Name/ConnectFood/client/src/environments/environment.ts","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule);\n\n\n\n// WEBPACK FOOTER //\n// C:/Users/User Name/ConnectFood/client/src/main.ts","/**\r\n * Encapsulates information pertaining to an AppUser that is shared between client and server.\r\n */\r\nexport class AppUserInfo {\r\n    \r\n    constructor(\r\n        public email?: string,\r\n        public lastName?: string,\r\n        public firstName?: string,\r\n        public address?: string,\r\n        public city?: string,\r\n        public state?: string,\r\n        public zip?: number,\r\n        public phone?: string,\r\n        public isDonor?: boolean,\r\n        public isReceiver?: boolean,\r\n        public organizationName?: string\r\n    ) { }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// C:/Users/User Name/ConnectFood/shared/authentication/app-user-info.ts","import { FoodWebResponse } from '../message-protocol/food-web-response';\r\nimport { AppUserInfo } from '../authentication/app-user-info';\r\n\r\n\r\nexport class LoginRequest {\r\n\r\n    constructor(\r\n        public email: string,\r\n        public password: string\r\n    ) { }\r\n}\r\n\r\n\r\nexport class LoginResponse extends FoodWebResponse {\r\n\r\n    constructor(\r\n        /**\r\n         * The shared info related to the App User that has successfully signed up.\r\n         */\r\n        public appUserInfo?: AppUserInfo,\r\n        /**\r\n         * Indicates whether or not the operation on the back end was successful.\r\n         */\r\n        public success?: boolean,\r\n        /**\r\n         * A message containing information pertaining to what happened during processing on the back end. If successful, then it should\r\n         * contain a simple success message. If unsuccessful, then it should contain the error message (without leaking sensitive data).\r\n         */\r\n        public message?: string,\r\n        /**\r\n         * Indicates if there is a need for the user to login to perform the related operation on the server.\r\n         */\r\n        public loginRequired: boolean = false,\r\n        /**\r\n         * Indicates if there is a need for the user to have their signup confirmed before performing certain functionality.\r\n         */\r\n        public signupConfirmRequired: boolean = false\r\n    ) {\r\n        super(success, message, loginRequired, signupConfirmRequired);\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// C:/Users/User Name/ConnectFood/shared/authentication/login-message.ts","import { AppUserInfo } from './app-user-info';\r\n\r\n\r\n/**\r\n * Contains data that should be sent during a signup request.\r\n */\r\nexport class SignupRequest {\r\n\r\n    constructor(\r\n        public appUserInfo: AppUserInfo,\r\n        public password: string\r\n    ) { }\r\n}\r\n\r\n// No signup response necessary since all the necessary information was submitted from the front end (nothing needs to be sent back).\r\n\n\n\n// WEBPACK FOOTER //\n// C:/Users/User Name/ConnectFood/shared/authentication/signup-message.ts","import { AppUserInfo } from './app-user-info';\r\n\r\n\r\n/**\r\n * Contains data that should be sent during an update app user request.\r\n */\r\nexport class UpdateAppUserRequest {\r\n    \r\n    constructor(\r\n        public appUserUpdateInfo?: AppUserInfo,\r\n        public newPassword?: string,\r\n        public currentPassword?: string\r\n    ) { }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// C:/Users/User Name/ConnectFood/shared/authentication/update-app-user-message.ts","export class DateFormatter {\r\n\r\n    // Pure static class!\r\n    private constructor() { }\r\n\r\n\r\n    public static dateToMonthDayYearString(date: Date): string {\r\n\r\n        if (date != null) {\r\n            // Check to see if we are in fact passed a Date object (may have been stringified in JSON response)!\r\n            if (!(date instanceof Date)) {\r\n                date = new Date(date);\r\n            }\r\n\r\n            return ((date.getMonth() + 1) + '/' + date.getDate() + '/' + date.getFullYear());\r\n        }\r\n\r\n        return '';\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// C:/Users/User Name/ConnectFood/shared/common-util/date-formatter.ts","import { AppUserInfo } from \"../authentication/app-user-info\";\r\n\r\n/**\r\n * Validation definitions that can commonly be used by front end angular forms and back end node logic.\r\n */\r\nexport class Validation {\r\n\r\n    /**\r\n     * Regular expression used for verifying email correctness.\r\n     */\r\n    public static readonly EMAIL_REGEX: RegExp = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\r\n\r\n    /**\r\n     * Regular expression used for verifying password correctness.\r\n     */\r\n    public static readonly PASSWORD_REGEX: RegExp = /^(?=.*[0-9])[a-zA-Z0-9!@#$%^&*]{6,20}$/;\r\n\r\n    /**\r\n     * Regular expression used for verifying 10 digit phone numbers with dashes.\r\n     */\r\n    public static readonly PHONE_REGEX: RegExp = /^\\d{3}\\-\\d{3}\\-\\d{4}$/;\r\n\r\n    /**\r\n     * Regular expression used for verifying 5 digit ZIP codes.\r\n     */\r\n    public static readonly ZIP_REGEX: RegExp = /^\\d{5}$/;\r\n    \r\n    /**\r\n     * Checks if an email string is in the correct format.\r\n     * @param email The email string to check.\r\n     * @return true if it is, false if not.\r\n     */\r\n    public static emailValidator(email: string): boolean {\r\n        // RFC 2822 compliant regex\r\n        return email.match(Validation.EMAIL_REGEX).length != null;\r\n    }\r\n     \r\n    /**\r\n     * Checks if a password string is in the correct format.\r\n     * @param password The password string to check.\r\n     * @return true if it is, false if not.\r\n     */\r\n    public static passwordValidator(password: string): boolean {\r\n        // {6,20}           - Assert password is between 6 and 20 characters\r\n        // (?=.*[0-9])      - Assert a string has at least one number\r\n        return password.match(Validation.PASSWORD_REGEX).length != null;\r\n    }\r\n\r\n    /**\r\n     * Checks if a 7 digit phone number with dashes (string) is in the correct format.\r\n     * @param phone The phone number string to check.\r\n     * @return true if it is, false if not.\r\n     */\r\n    public static phoneValidator(phone: string): boolean {\r\n        return phone.match(Validation.PHONE_REGEX).length != null;\r\n    }\r\n\r\n    /**\r\n     * Checks if a 5 digit ZIP code is in the correct format.\r\n     * @param zip The ZIP code to check.\r\n     * @return true if it is, false if not.\r\n     */\r\n    public static zipValidator(zip: string): boolean {\r\n        return zip.match(Validation.ZIP_REGEX).length != null;\r\n    }\r\n\r\n\r\n    /**\r\n     * Validates given app user information and password.\r\n     * @param appUserInfo The app user info to validate.\r\n     * @param password The password to validate.\r\n     * @return On successful validation, null. On unsuccess, then an error is returned.\r\n     */\r\n    public static validateAppUserInfo(appUserInfo: AppUserInfo, password: string): Error {\r\n        if (appUserInfo.email != null && !Validation.emailValidator(appUserInfo.email)) {\r\n            return new Error('Provided email not in correct format.');\r\n        }\r\n\r\n        if (password != null && !Validation.passwordValidator(password)) {\r\n            return new Error('Incorrect password format. Password must contain a minimum of 6 characters and at least one number');\r\n        }\r\n\r\n        if (appUserInfo.zip != null && !Validation.zipValidator(appUserInfo.zip.toString())) {\r\n            return new Error('Incorrect ZIP code format. The ZIP code must contain exactly 5 numbers.');\r\n        }\r\n\r\n        return null;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// C:/Users/User Name/ConnectFood/shared/common-util/validation.ts","import { FoodWebResponse } from '../message-protocol/food-web-response'\r\nimport { FoodListingUpload } from './food-listing-upload';\r\nexport { FoodListingUpload };\r\n\r\n\r\nexport class AddFoodListingRequest {\r\n\r\n    constructor(\r\n        public foodListingUpload?: FoodListingUpload\r\n    ) { }\r\n}\r\n\r\n\r\nexport class AddFoodListingResponse extends FoodWebResponse {\r\n    \r\n    constructor(\r\n        /**\r\n         * The key of the added food listing. Can be used to edit the added listing.\r\n         */\r\n        public foodListingKey?: number,\r\n        /**\r\n         * Indicates whether or not the operation on the back end was successful.\r\n         */\r\n        public success?: boolean,\r\n        /**\r\n         * A message containing information pertaining to what happened during processing on the back end. If successful, then it should\r\n         * contain a simple success message. If unsuccessful, then it should contain the error message (without leaking sensitive data).\r\n         */\r\n        public message?: string,\r\n        /**\r\n         * Indicates if there is a need for the user to login to perform the related operation on the server.\r\n         */\r\n        public loginRequired: boolean = false,\r\n        /**\r\n         * Indicates if there is a need for the user to have their signup confirmed before performing certain functionality.\r\n         */\r\n        public signupConfirmRequired: boolean = false\r\n    ) {\r\n        super(success, message, loginRequired, signupConfirmRequired);\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// C:/Users/User Name/ConnectFood/shared/food-listings/add-food-listing-message.ts","/**\r\n * The expected request for the (un)claim food listings operation. Should be sent from the client to the server.\r\n */\r\nexport class ClaimFoodListingRequest {\r\n\r\n    constructor(\r\n        /**\r\n         * The key identifier of the Food Listing to be claimed.\r\n         */\r\n        public foodListingKey: number\r\n    ) { }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// C:/Users/User Name/ConnectFood/shared/food-listings/claim-food-listing-message.ts","/**\r\n * A container for holding data used in the upload of a new food listing.\r\n */\r\nexport class FoodListingUpload {\r\n\r\n    constructor(\r\n        public foodListingKey?: number,\r\n        public foodTypes?: string[],\r\n        public foodDescription?: string,\r\n        public perishable?: boolean,\r\n        /**\r\n         * Expiration date of the format mm/dd/yyyy\r\n         */\r\n        public expirationDate?: Date,\r\n        /**\r\n         * The string representation of the image associated with the listing.\r\n         * Should only be populated for the addition or upload of a new Food Listing.\r\n         */\r\n        public imageUpload?: string\r\n    ) { }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// C:/Users/User Name/ConnectFood/shared/food-listings/food-listing-upload.ts","/**\r\n * A single Food Listing entry that mainly contains data that is relavent to the user when browsing food listings.\r\n */\r\nexport class FoodListing {\r\n\r\n    constructor(\r\n        public foodListingKey?: number,\r\n        public donorOrganizationName?: string,\r\n        public donorOrganizationAddress?: string,\r\n        public donorOrganizationCity?: string,\r\n        public donorOrganizationState?: string,\r\n        public donorOrganizationZip?: number,\r\n        public donorLastName?: string,\r\n        public donorFirstName?: string,\r\n        /**\r\n         * The distance of the donor from the receiver that is browsing the food listings.\r\n         */\r\n        public donorDistance?: number,\r\n        public foodTypes?: string[],\r\n        public foodDescription?: string,\r\n        public quantityClass?: string,\r\n        public perishable?: boolean,\r\n        /**\r\n         * Expiration date of the format mm/dd/yyyy\r\n         */\r\n        public expirationDate?: string,\r\n        /**\r\n         * The url of a saved Food Listing that will be used to display the associated image.\r\n         */\r\n        public imgUrl?: string\r\n    ) { }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// C:/Users/User Name/ConnectFood/shared/food-listings/food-listing.ts","/**\r\n * An emumeration of different food listing statuses to filter on.\r\n */\r\nexport enum LISTINGS_STATUS {\r\n    unclaimedListings,\r\n    myClaimedListings,\r\n    myDonatedListings\r\n};\r\n\r\n\r\n/**\r\n * A basic container for Food Listing filter data that may be sent to/from the server/client.\r\n */\r\nexport class FoodListingsFilters {\r\n\r\n\r\n    constructor(\r\n        /**\r\n         * Determines what food types the results should contain.\r\n         */\r\n        public foodTypes?: string[],\r\n        /**\r\n         * Determines if results should include perishable elements.\r\n         */\r\n        public perishable?: boolean,\r\n        /**\r\n         * Determines if results should include non-perishable elements.\r\n         */\r\n        public notPerishable?: boolean,\r\n        /**\r\n         * Determines the minimum date that retrieved items may expire after.\r\n         */\r\n        public earliestExpireDate?: Date,\r\n        /**\r\n         * Determines the maximum distance from the requesting entity that donations must fall within.\r\n         */\r\n        public maxDistance?: number,\r\n        /**\r\n         * Determines the offset used when retrieving a limited segment of food listings.\r\n         */\r\n        public retrievalOffset?: number,\r\n        /**\r\n         * Determines the number of food listings that will be contained in the limited segment of retrievals.\r\n         */\r\n        public retrievalAmount?: number,\r\n        /**\r\n         * Determines what food listings we should bring back based off of their status (unclaimed, claimed, or donated relative to the current user).\r\n         */\r\n        public listingsStatus: LISTINGS_STATUS = LISTINGS_STATUS.unclaimedListings\r\n    ) { }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// C:/Users/User Name/ConnectFood/shared/food-listings/food-listings-filters.ts","import { FoodListingsFilters } from '../food-listings/food-listings-filters';\r\nexport { FoodListingsFilters };\r\n\r\nimport { FoodWebResponse } from '../message-protocol/food-web-response';\r\nimport { FoodListing } from \"../food-listings/food-listing\";\r\nexport { FoodListing };\r\n\r\n\r\n/**\r\n * The expected request for the get food listings operation. Should be sent from the client to the server.\r\n */\r\nexport class GetFoodListingsRequest {\r\n\r\n    constructor(\r\n        /**\r\n         * Filters to use when getting food listings.\r\n         */\r\n        public filters: FoodListingsFilters\r\n    ) { }\r\n}\r\n\r\n\r\n/**\r\n * The expected response from the get food listings operation. Should be sent form the server to the client.\r\n */\r\nexport class GetFoodListingsResponse extends FoodWebResponse {\r\n\r\n    constructor(\r\n        /**\r\n         * The food listings that were retrieved during the server operation.\r\n         */\r\n        public foodListings?: FoodListing[],\r\n        /**\r\n         * Indicates whether or not the operation on the back end was successful.\r\n         */\r\n        public success?: boolean,\r\n        /**\r\n         * A message containing information pertaining to what happened during processing on the back end. If successful, then it should\r\n         * contain a simple success message. If unsuccessful, then it should contain the error message (without leaking sensitive data).\r\n         */\r\n        public message?: string,\r\n        /**\r\n         * Indicates if there is a need for the user to login to perform the related operation on the server.\r\n         */\r\n        public loginRequired: boolean = false,\r\n        /**\r\n         * Indicates if there is a need for the user to have their signup confirmed before performing certain functionality.\r\n         */\r\n        public signupConfirmRequired: boolean = false\r\n    ) {\r\n        super(success, message, loginRequired, signupConfirmRequired);\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// C:/Users/User Name/ConnectFood/shared/food-listings/get-food-listings-message.ts","/**\r\n * Basic format for responses from the server. All responses should follow this interface!\r\n */\r\nexport class FoodWebResponse {\r\n    constructor(\r\n        /**\r\n         * Indicates whether or not the operation on the back end was successful.\r\n         */\r\n        public success?: boolean,\r\n        /**\r\n         * A message containing information pertaining to what happened during processing on the back end. If successful, then it should\r\n         * contain a simple success message. If unsuccessful, then it should contain the error message (without leaking sensitive data).\r\n         */\r\n        public message?: string,\r\n        /**\r\n         * Indicates if there is a need for the user to login to perform the related operation on the server.\r\n         */\r\n        public loginRequired: boolean = false,\r\n        /**\r\n         * Indicates if there is a need for the user to have their signup confirmed before performing certain functionality.\r\n         */\r\n        public signupConfirmRequired: boolean = false\r\n    ) { }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// C:/Users/User Name/ConnectFood/shared/message-protocol/food-web-response.ts"],"sourceRoot":"webpack:///"}